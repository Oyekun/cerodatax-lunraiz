/*
 * File: app/view/nomenclador/NivelEducacionalViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cerodatax.view.nomenclador.NivelEducacionalViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.nomencladorniveleducacional',

    showView: function(view) {
        var layout = this.getReferences().display.getLayout();
        layout.setActiveItem(this.lookupReference(view));
    },

    select: function(rowmodel, record, index, eOpts) {
        // Set selected record
        this.getViewModel().set('record', record);
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        botones.forEach(function (item) {
            item.setDisabled(false);
        });
        // Show details
        this.showView('details');
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        if(selected.length>1)
        {this.getViewModel().set('record', selected[selected.length-1]);

            botones.forEach(function (item) {
                item.setDisabled(true);
            });
        }
        else botones.forEach(function (item) {
            item.setDisabled(false);
        });
        var botonesRemove =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
        if(selected.length>0)
        {
            botonesRemove.forEach(function (item) {
                item.setDisabled(false);
            });
        }


    },

    add: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            newRecord = Ext.create('model.niveleducacional');

        // Clear form
        form.reset();

        // Set record
        form.loadRecord(newRecord);

        // Set title
        formPanel.setTitle('Adicionar Nivel Educacional');

        // Show form
        this.showView('form');

        // Deselect grid
        var grid =  Ext.ComponentQuery.query('panel gridpanel');

        grid.forEach(function (item) {

            item.getSelectionModel().deselectAll();
        });
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
        botones.forEach(function (item) {
            item.setDisabled(true);
        });
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        botones.forEach(function (item) {
            item.setDisabled(true);
        });
    },

    edit: function(button, e, eOpts) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            record = this.getViewModel().get('record');

        // Load record model into form
        form.loadRecord(record);

        // Set title
        formPanel.setTitle('Editar Nivel Educacional');

        // Show form
        this.showView('form');
    },

    remove: function(button, e, eOpts) {
        var me = this;
        var grid =  Ext.ComponentQuery.query('panel #gridPanelNivel')[0];

        var sm = grid.getSelectionModel().selected;
        var mensajeText = 'Esta seguro que desea eliminar los elementos seleccionados?';

        if(sm.length==1)
        var mensajeText = 'Esta seguro que desea eliminar el elemento seleccionado?';
        // Ask user to confirm this action
        Ext.Msg.confirm('Confirmaci贸n de Eliminar', mensajeText, function(result) {

            // User confirmed yes
            if (result == 'yes') {

                var record = me.getViewModel().get('record'),
                    store = Ext.StoreManager.lookup('nomenclador.NivelEducacional');
                //console.log(record);
                // Delete record from store



                // Deselect grid

                var deleteItem = [];
                sm.each(function (item) {

                    deleteItem.push(item);
                });
                var itemDe = store.remove(deleteItem);

                if (itemDe.length ==1)
                { //this.load();
                    Ext.MessageBox.show({
                        title: 'Informaci贸n',
                        msg: 'El elemento ha sido eliminado satisfactoriamente',
                        buttons: Ext.MessageBox.OK,
                        //animateTarget: 'mb9',
                        //fn: showResult,
                        icon: Ext.MessageBox.INFO
                    });


                }
                else if(itemDe.length >1){

                    Ext.MessageBox.show({
                        title: 'Informaci贸n',
                        msg: 'Los elementos han sido eliminados satisfactoriamente',
                        buttons: Ext.MessageBox.OK,
                        animateTarget: 'mb9',
                        //fn: showResult,
                        icon: Ext.MessageBox.INFO
                    });

                }

                else {
                    var menssage = 'Los elementos no se han eliminado';
                    if(sm.length ==1)
                    menssage = 'El elemento no se han eliminado';
                    Ext.MessageBox.show({
                        title: 'Error',
                        msg: menssage,
                        buttons: Ext.MessageBox.OK,
                        animateTarget: 'mb9',
                        //fn: showResult,
                        icon: Ext.MessageBox.ERROR
                    });

                }

                var flag = true;


                // Hide display
                me.showView('selectMessage');
                //Disabled Button

                button.setDisabled(true);
                var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                botones.forEach(function (item) {
                    item.setDisabled(true);
                });

            }

        });
    },

    refresh: function(button, e, eOpts) {
 
    },

    onToolbarAfterRender: function(component, eOpts) {

    },

    save: function(button, e, eOpts) {
        var form = this.getReferences().form.getForm(),
            record = form.getRecord(),
            store = Ext.StoreManager.lookup('nomenclador.NivelEducacional');
        var me = this;
        // Valid
        if (form.isValid()) {

            // Update associated record with values

            var nombre='';

            form.owner.items.items.forEach(function (item) {
                if(item.name == 'nombre')
                nombre = item.value;
            });

            // Add to store if new record

            var dt = store.findRecord('nombre',nombre);
            if (record.phantom) {



                if(dt===null)
                {form.updateRecord();
                    store.add(record);
                    store.commitChanges();

                }
                else  Ext.MessageBox.show({
                    title: 'Error',
                    msg: 'El elemento ya existe.',
                    buttons: Ext.MessageBox.OK,
                    //animateTarget: 'mb9',
                    //fn: showResult,
                    icon: Ext.MessageBox.ERROR
                });




            }else{



                if(dt===null)
                {form.updateRecord();
                    store.commitChanges();

                }else
                Ext.MessageBox.show({
                    title: 'Error',
                    msg: 'El elemento ya existe.',
                    buttons: Ext.MessageBox.OK,
                    //animateTarget: 'mb9',
                    //fn: showResult,
                    icon: Ext.MessageBox.ERROR
                });


            }

            // Commit changes

            var flag=true;
            store.on('write',fn = function(store, operation, eOpts ) {


                if(flag)
                {var json = Ext.JSON.decode(operation._response.responseText);

                    if (json.id !== null)
                    { this.load({
                        callback: function(s,o,e){
                            flag = false;
                            me.showView('selectMessage');
                        }
                    });
                    Ext.MessageBox.show({
                        title: 'Informaci贸n',
                        msg: json.message,
                        buttons: Ext.MessageBox.OK,
                        //animateTarget: 'mb9',
                        //fn: showResult,
                        icon: Ext.MessageBox.INFO
                    });

                }
                else{

                    Ext.MessageBox.show({
                        title: 'Error',
                        msg: json.message,
                        buttons: Ext.MessageBox.OK,
                        //animateTarget: 'mb9',
                        //fn: showResult,
                        icon: Ext.MessageBox.ERROR
                    });

                }
                var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                botones.forEach(function (item) {
                    item.setDisabled(true);
                });
                var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                botonesEditar.forEach(function (item) {
                    item.setDisabled(true);
                });}

            });
            // Display record


        }
    },

    cancelEdit: function(button, e, eOpts) {
        // Show details
        this.showView('details');
    }

});
