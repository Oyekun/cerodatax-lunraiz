/*
 * File: app/view/nomenclador/CrudViewController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('cerodatax.view.nomenclador.CrudViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.nomencladorcrud',

    control: {
        "#gridPanel": {
            select: 'select',
            selectionchange: 'onGridpanelSelectionChange'
        },
        "#cancelButton": {
            click: 'cancelEdit'
        }
    },

    select: function(rowmodel, record, index, eOpts) {
        // Set selected record
        this.getViewModel().set('record', record);


        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        botones.forEach(function (item) {
            item.setDisabled(false);
        });
        // Show details
        this.showView('details');
    },

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        if(selected.length>1)
         {this.getViewModel().set('record', selected[selected.length-1]);

        botones.forEach(function (item) {
        item.setDisabled(true);
        });
         }
        else botones.forEach(function (item) {
        item.setDisabled(false);
        });
        var botonesRemove =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
         if(selected.length>0)
         {
        botonesRemove.forEach(function (item) {
        item.setDisabled(false);
        });
              var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');

              if(selected.length>0)
         {btnAssociate.forEach(function (item) {
                                       item.setDisabled(false);
                                   });
         }
        }


    },

    cancelEdit: function(button, e, eOpts) {
        // Show details
        var windows = button.up('window');
        if(windows)
            windows.close();
        //else this.showView('details');
        if(button.up('panel'))
        {if(button.up('panel').up('panel').up('panel').down('gridpanel'))
        {var boton = button.up('panel').up('panel').up('panel').down('gridpanel').down('button');
         this.refresh(boton);
        }
         else if(button.up('panel').up('panel').up('panel').down('treepanel'))
         {var boton = button.up('panel').up('panel').up('panel').down('treepanel').down('button');
          this.refresh(boton);
         }
        }

    },

    showView: function(view) {

                var referencia = this.getReferences();
                if(referencia!==null)
                {if(referencia.display)
                     {           var layout = referencia.display.getLayout();
                layout.setActiveItem(this.lookupReference(view));
                      }
                }
    },

    addWindows: function(button, e, eOpts) {
        this.model='';
        this.win='';
        var me = this;
        var aux = this.view.xtype;
        this.getWinPanel(aux);
        win = this.win;
        model = this.model;


        var vista = Ext.create('widget.'+win);
        vista.title = 'Adicionar '+vista.title;
         form = vista.down('form').getForm();


                var newRecord = Ext.create(model);
        var record = this.getViewModel().get('record');

        if(newRecord.data.parent_id!==undefined)
         {if(record)
        {//newRecord.data.parent = record.data.nombre;
        newRecord.data.parent_id = record.data.id;

        }else {
            newRecord.data.parent_id = '';

        }}

                // Clear form
                form.reset();

                // Set record
                form.loadRecord(newRecord);
        var focus=false;
        var itemfocus;
        form.owner.items.items.forEach(function (item) {

             findtreepanel = true;
                var resultree = [];
                    resultree = me.searchComponent('treepanel',item,resultree);
                 for(var comptree in resultree)
                            {var objtree = resultree[comptree];
                             if(objtree.config.disabled)
                              objtree.store.clearData();

         if(!objtree.config.disabled)
                                 if(objtree.xtype=='treepanel')
                        {    if(record!==null)
                            objtree.store.proxy.extraParams.id_asociado =record.data.id;
                            else
                                objtree.store.proxy.extraParams.id_asociado ='';
                            objtree.store.proxy.extraParams.parent_id ='';
                            objtree.store.proxy.extraParams.detalles ='';

        objtree.store.load();
                        }
                            }



        var result = [];
                    result = me.searchComponent('combobox',item,result);
                var callback = function (records, operation, success) {
        if(obj.store)
                                        obj.store.proxy.extraParams.combo ='';
                                    };
                 for(var comp in result)
                            {var obj = result[comp];

                             if(!obj.config.disabled||item.config.disabled===undefined)
                                if(obj.xtype=='combobox')
                                {if(obj.store.proxy.extraParams)
                                           { obj.store.proxy.extraParams.combo ='combo';
                                            obj.store.load({   scope: this,
                                    callback: callback});
                                           }}
                            }

        if(focus===false)
        {var resulttext = [];
                resulttext = me.searchComponent('textfield',item,resulttext);

                if(resulttext.length>0)
                   { resulttext[0].focus('',10);
                    itemfocus = resulttext[0];
                focus = true;
                   }
        }


              if(focus===false)
                if(item.xtype==='numberfield'||item.xtype==='textfield'||item.xtype==='textareafield')
                {item.focus('', 10);
                focus = true;
                }

                });

        var callbackfocus = function (){
        if(itemfocus)
        itemfocus.focus('', 10);
            };
        vista.show(null,callbackfocus);

    },

    editWindows: function(button, e, eOpts) {
        this.model='';
        this.win='';
        var me = this;
        var aux = this.view.xtype;
        this.getWinPanel(aux);
        win = this.win;
        model = this.model;



        var vista = Ext.create('widget.'+win);
        vista.title = 'Editar '+vista.title;
        form = vista.down('form').getForm();


        var record = this.getViewModel().get('record');

        // Load record model into form
        var focus=false;
        var itemfocus;
        form.owner.items.items.forEach(function (item) {

            if(item.xtype=='treepanel')
            {
                if(record!==null)
                    item.store.proxy.extraParams.id_asociado =record.data.id;
                else
                    item.store.proxy.extraParams.id_asociado ='';
                item.store.proxy.extraParams.parent_id ='';
                item.store.proxy.extraParams.detalles ='edit';

                item.store.load();
            }


            if(focus===false)
            {var resulttext = [];
             resulttext = me.searchComponent('textfield',item,resulttext);

             if(resulttext.length>0)
             { resulttext[0].focus('',10);
              itemfocus = resulttext[0];
              focus = true;
             }
            }


            var resulimage = [];
            resulimage = me.searchComponent('image',item,resulimage);
            var objimgold=null;
            for(var compimg in resulimage)
            {var objimg = resulimage[compimg];
             //objimg.setVisible(false);
             if(objimg.config.hidden)
             {
                 var img_value= '';
                 if(record.data[objimg.itemId])
                     img_value = record.data[objimg.itemId].toString();


                 if(img_value!=='')
                 { objimg.setSrc(img_value); objimg.setVisible(true);objimgold = objimg;}
             }
             else
             {
                 if(objimgold!==null)
                 {objimg.setVisible(false); objimgold=null;}}



            }

            if(item.xtype=='tabpanel')
            {
                var result = [];
                result = me.searchComponent('combobox',item,result);
                var callback = function (records, operation, success) {

                    if(obj.store!==null)
                        obj.store.proxy.extraParams.combo ='';
                    // itemt.setDisabled(false);

                };
                for(var comp in result)
                {var obj = result[comp];
                 if(obj.xtype=='combobox')
                 {
                     if(obj.config.inputAttrTpl)
                     {  var form =obj.up('form');
                      var acciones = obj.config.inputAttrTpl[0].split(',');
                      // console.log(obj.config.inputAttrTpl)

                      for(var accion in acciones)
                      {

                          var campo = acciones[accion].split(':');

                          var itemt = form.down('treepanel[title='+campo[0]+']');


                          if(itemt!==null)
                          {      if(campo[1]==='false')
                          {
                              if(record!==null)
                              {var filter = [];

                               filter.campo_id = record.data[obj.name].toString();
                               //  console.log(record.data[obj.name])
                               itemt.store.proxy.extraParams.combo='combo';
                               filter.push({value:filter.campo_id,name_id:obj.name});
                               itemt.store.proxy.extraParams.filter=Ext.JSON.encode(filter);

                              }
                          }
                           else {
                               itemt.setDisabled(true);
                           }
                           if(record.data[obj.name]!=='')
                               itemt.setDisabled(false);
                           //  itemt.store.load()
                          }
                      }
                     }


                     if(obj.store.proxy.extraParams)
                     { obj.store.proxy.extraParams.combo ='combo';

                      obj.store.load({   scope: this,
                                      callback: callback});
                     }}
                }



                var resultree = [];
                resultree = me.searchComponent('treepanel',item,resultree);
                var callbacktree = function (records, operation, success) {
                    objtree.setDisabled(false);
                    if(objtree.clearFilters)
                        objtree.clearFilters();
                    objtree.store.proxy.extraParams.combo = '';
                    objtree.store.proxy.extraParams.filter ='';

                };
                for(var comptree in resultree)
                {var objtree = resultree[comptree];
                 if(objtree.xtype=='treepanel')
                 {   // console.log(record)
                     if(record!==null)
                     {objtree.setDisabled(false);
                      objtree.store.proxy.extraParams.id_asociado =record.data.id;
                     }   else
                         objtree.store.proxy.extraParams.id_asociado ='';
                     objtree.store.proxy.extraParams.parent_id ='';
                     objtree.store.proxy.extraParams.detalles ='edit';

                     //objtree.store.load();
                     objtree.store.load({   scope: this,
                                         callback: callbacktree});
                 }
                }

            }




            if(item.xtype=='combobox')
            {if(record.data[item.name]!=='')
                item.setDisabled(false);
             if(item.store.proxy.extraParams)
             { item.store.proxy.extraParams.combo ='combo';
              item.store.load({   scope: this,
                               callback: function (records, operation, success) {

                                   item.store.proxy.extraParams.combo ='';
                               }});
             }}
            if(item.xtype=='fieldset')
            {  var resultcombo = [];
             resultcombo = me.searchComponent('combobox',item,resultcombo);
             var callbackobjcombo =  function (records, operation, success) {

                 objcombo.store.proxy.extraParams.combo ='';
                 //  itemtcombo.setDisabled(false);

             };
             for(var compcombo in resultcombo)
             {var objcombo = resultcombo[compcombo];
              if(objcombo.xtype=='combobox')
              {
                  if(objcombo.config.inputAttrTpl)
                  {  var formcombo =objcombo.up('form');
                   var accionescombo = objcombo.config.inputAttrTpl[0].split(',');
                   // console.log(obj.config.inputAttrTpl)
                   for(var accioncombo in accionescombo)
                   {

                       var campocombo = accionescombo[accioncombo].split(':');

                       var itemtcombo = formcombo.down('treepanel[title='+campocombo[0]+']');


                       if(itemtcombo!==null)
                       {      if(campocombo[1]==='false')
                       {
                           if(record!==null)
                           {var filtercombo = [];

                            filtercombo.campo_id = record.data[objcombo.name].toString();
                            //  console.log(record.data[obj.name])
                            itemtcombo.store.proxy.extraParams.combo='combo';
                            filtercombo.push({value:filtercombo.campo_id,name_id:objc.name});
                            itemtcombo.store.proxy.extraParams.filter=Ext.JSON.encode(filtercombo);


                           }
                       }
                        else {
                            itemtcombo.setDisabled(true);
                        }
                        if(record.data[objcombo.name]!=='')
                            itemtcombo.setDisabled(false);
                        // itemtcombo.store.load()
                       }

                   }
                  }


                  if(objcombo.store.proxy.extraParams)
                  { objcombo.store.proxy.extraParams.combo ='combo';
                   objcombo.store.load({   scope: this,
                                        callback: callbackobjcombo});
                  }}
             }
            }

            if(focus===false)
                if(item.xtype==='numberfield'||item.xtype==='textfield'||item.xtype==='textareafield')
                {item.focus('', 10);
                 focus = true;
                }

        });
        // Show form
        form.loadRecord(record);
        this.isValid(form);

        var callbackfocus = function (){
            if(itemfocus)
                itemfocus.focus('', 10);
        };
        vista.show(null,callbackfocus);
    },

    edit: function(target) {
        var formPanel = this.getReferences().form,
            form = formPanel.getForm(),
            record = this.getViewModel().get('record');
        console.log(target)
        // Load record model into form
        form.loadRecord(record);
        //console.log(form)
        var auxTitle = this.view.title;
        var countWord = this.view.title.split(' ');
        var title = '';
        for (i=0;i<countWord.length;i++)
        {
            for(j=0;j<countWord[i].length-1;j++)
            {  if(j+1<countWord[i].length)
                word = countWord[i][j] + countWord[i][j+1];
             if(word=='es')
             {
                 var lastword = countWord[i][j-1];
                 if(lastword=='t')
                     title+='e';
                 break;
             }
             title += countWord[i][j];
             if(countWord[i][j+1]!='s' && j+1==countWord[i].length-1)
                 title += countWord[i][j+1];

            }
            if(i+1<countWord.length)
                title+=' ';
        }


        // Set title
        formPanel.setTitle('Editar '+title);
        var me = this;
        var focus =false; // Para dar el foco al primer elemento del formulario
        form.owner.items.items.forEach(function (item) {

            var objtree = item;
            if(objtree.xtype=='treepanel')
            {   // console.log(record)
                if(record!==null)
                {objtree.setDisabled(false);
                 objtree.store.proxy.extraParams.id_asociado =record.data.id;
                }   else
                    objtree.store.proxy.extraParams.id_asociado ='';
                objtree.store.proxy.extraParams.parent_id ='';
                objtree.store.proxy.extraParams.detalles ='edit';

                //objtree.store.load();
                objtree.store.load({   scope: this,
                                    callback: function (records, operation, success) {
                                        objtree.setDisabled(false);
                                        if(objtree.clearFilters)
                                            objtree.clearFilters();
                                        objtree.store.proxy.extraParams.combo = '';
                                        objtree.store.proxy.extraParams.filter ='';

                                    }});
            }
            if(item.xtype=='tabpanel')
            {  var result = [];
             result = me.searchComponent('combobox',item,result);
             var callbackcombobox = function (records, operation, success) {

                 obj.store.proxy.extraParams.combo ='';
             };
             for(var comp in result)
             {var obj = result[comp];
              if(obj.xtype=='combobox')
              {if(obj.store.proxy.extraParams)
              { obj.store.proxy.extraParams.combo ='combo';
               obj.store.load({   scope: this,
                               callback: callbackcombobox});
              }}
             }
            }

            var resulimage = [];
            resulimage = me.searchComponent('image',item,resulimage);
            var objimgold=null;
            for(var compimg in resulimage)
            {var objimg = resulimage[compimg];
             if(objimg.itemId=='foto')
                 objimg.setVisible(true);
             else  objimg.setVisible(false);
             if(objimg.config.hidden)
             { var img_value= '';

              if(record.data.systema!==undefined)
              {
                  if(record.data.systema)
                  {
                      var value = record.data[objimg.itemId].toString();
                      var systema = 'xf1ad@FontAwesome';//'x-fa fa-'+value;
                      // objimg.setSrc('')
                      objimg.setGlyph(systema); // no coge el fontawasemo
                  }
                  else{

                      if(record.data[objimg.itemId])
                          img_value = record.data[objimg.itemId].toString();


                      if(img_value!=='')
                      { objimg.setSrc(img_value); objimg.setVisible(true);objimgold = objimg;}
                  }

              }
              else{
                  if(record.data[objimg.itemId])
                      img_value = record.data[objimg.itemId].toString();


                  if(img_value!=='')
                  { objimg.setSrc(img_value); objimg.setVisible(true);objimgold = objimg;}
              }
             }
             else
             {
                 if(objimgold!==null)
                 {objimg.setVisible(false); objimgold=null;}}



            }

            /* if(item.xtype=='combobox')
            {item.store.proxy.extraParams.combo ='combo';
             item.store.load({   scope: this,
                              callback: function (records, operation, success) {

                                  item.store.proxy.extraParams.combo ='';
                              }});}*/
            //var result = [];
            // result = me.searchComponent('combobox',item,result);
            if(item.xtype=='multiselector')
            {
                if(record!==null)
                    item.store.proxy.extraParams.id_asociado =record.data.id;
                else
                    item.store.proxy.extraParams.id_asociado ='';
                item.store.proxy.extraParams.detalles ='edit';
                item.store.proxy.extraParams.combo ='combo';
                // item.store.load();

                var store = Ext.data.StoreManager.lookup(item.config.search.store);

                store.proxy.extraParams.id_asociado ='';

                store.proxy.extraParams.detalles ='edit';
                store.proxy.extraParams.grid =false;
                store.proxy.extraParams.combo ='combo';

                item.store.load({   scope: this,
                                 callback: function (records, operation, success) {

                                     console.log(records)

                                     store.load({   scope: this,
                                                 callback: function (recordss, operation, success) {

                                                     console.log(recordss)
                                                 }});
                                 }});


            }

            var objcombo = item;
            if(objcombo.xtype=='combobox')
            {
                if(objcombo.config.inputAttrTpl)
                {  var form =objcombo.up('form');
                 var acciones = objcombo.config.inputAttrTpl[0].split(',');
                 // console.log(obj.config.inputAttrTpl)
                 for(var accion in acciones)
                 {

                     var campo = acciones[accion].split(':');

                     var itemt = form.down('treepanel[title='+campo[0]+']');


                     if(itemt!==null)
                     {      if(campo[1]==='false')
                     {
                         if(record!==null)
                         {var filter = [];

                          filter.campo_id = record.data[objcombo.name].toString();
                          //  console.log(record.data[obj.name])
                          itemt.store.proxy.extraParams.combo='combo';
                          filter.push({value:filter.campo_id,name_id:objcombo.name});
                          itemt.store.proxy.extraParams.filter=Ext.JSON.encode(filter);

                         }
                     }
                      else {
                          itemt.setDisabled(true);
                      }
                      if(record.data[objcombo.name]!=='')
                          itemt.setDisabled(false);
                      //  itemt.store.load()
                     }
                 }
                }


                if(objcombo.store.proxy.extraParams)
                { objcombo.store.proxy.extraParams.combo ='combo';
                 objcombo.store.load({   scope: this,
                                      callback: function (records, operation, success) {

                                          if(objcombo.store!==null)
                                              objcombo.store.proxy.extraParams.combo ='';
                                          // itemt.setDisabled(false);

                                      }});
                }}

            if(focus===false)
                if(item.xtype==='numberfield'||item.xtype==='textfield'||item.xtype==='textareafield')
                {item.focus('', 10);
                 focus = true;
                }



        });
        // Show form

        this.isValid(form);
        this.showView('form');
    },

    add: function(button, e, eOpts) {
        if((typeof eOpts)!=='undefined')
        {
            this.model='';
            this.win='';
            var me = this;
            var aux = this.view.xtype;
            this.getWinPanel(aux);
            win = this.win;
            model = this.model;

            var formPanel = this.getReferences().form,
                form = formPanel.getForm(),
                newRecord = Ext.create(model);
            // Clear form
            form.reset();

            // Set record
            //console.log(record)
            var record = this.getViewModel().get('record');


            form.loadRecord(newRecord);
            if(record)
            {   if(record.data)
                if(record.data.root!==undefined)
                if(record.data.root===false)
                {//newRecord.data.parent = record.data.nombre;
                    newRecord.data.parent_id = record.data.id;

                }
            }
            //else {
            // if(newRecord.data.root===false)
            //newRecord.data.parent_id = 'root';

            //}

            var auxTitle = this.view.title;
            var countWord = this.view.title.split(' ');
            var title = '';
            for (i=0;i<countWord.length;i++)
            {
                for(j=0;j<countWord[i].length-1;j++)
                {  if(j+1<countWord[i].length)
                    word = countWord[i][j] + countWord[i][j+1];

                 if(word=='es')
                 {
                     var lastword = countWord[i][j-1];
                     if(lastword=='t')
                         title+='e';
                     break;
                 }
                 title += countWord[i][j];
                 if(countWord[i][j+1]!='s' && j+1==countWord[i].length-1)
                     title += countWord[i][j+1];

                }
                if(i+1<countWord.length)
                    title+=' ';
            }

            // Set title
            formPanel.setTitle('Adicionar '+title);
        var focus =false; // Para dar el foco al primer elemento del formulario
            form.owner.items.items.forEach(function (item) {

                var resultree = [];
                resultree = me.searchComponent('treepanel',item,resultree);
                for(var comptree in resultree)
                {var objtree = resultree[comptree];

                 objtree.setDisabled(objtree.initialConfig.disabled);
                 if(objtree.config.disabled)
                     objtree.store.clearData();


                 if(objtree.config.disabled===false) {

                     if(objtree.xtype=='treepanel')  {

                         if(record!==null)
                         { if(record.data.parentId!==undefined)
                             objtree.store.proxy.extraParams.id_asociado =record.data.id;
                          else objtree.store.proxy.extraParams.id_asociado ='';
                         }
                         else
                             objtree.store.proxy.extraParams.id_asociado ='';
                         objtree.store.proxy.extraParams.parent_id ='';
                         objtree.store.proxy.extraParams.detalles ='';
                         objtree.store.proxy.extraParams.filter='';


                         objtree.store.load();
                     }
                 }
                }


                var result = [];
                result = me.searchComponent('combobox',item,result);
                var callbackcombo = function (records, operation, success) {
                                          if(obj.store)
                                              obj.store.proxy.extraParams.combo ='';
                                      };
                for(var comp in result)
                {var obj = result[comp];

                 if(!obj.config.disabled||item.config.disabled===undefined)
                     if(obj.xtype=='combobox')
                     {if(obj.store.proxy.extraParams)
                     { obj.store.proxy.extraParams.combo ='combo';
                      obj.store.load({   scope: this,
                                      callback: callbackcombo});
                     }}
                }

                 var resulimage = [];
            resulimage = me.searchComponent('image',item,resulimage);
            var objimgold=null;
            for(var compimg in resulimage)
            {var objimg = resulimage[compimg];

             if(objimg.itemId=='foto1')
             objimg.setVisible(true);
             else  objimg.setVisible(false);
             if(objimg.config.hidden)
             {

                 var img_value = '';


                 if(img_value!=='')
                 { objimg.setSrc(img_value); objimg.setVisible(true);objimgold = objimg;}
             }
             else
             {
                 if(objimgold!==null)
                 {objimg.setVisible(false); objimgold=null;}}



            }


             if(item.xtype=='multiselector')
            {

                    item.store.proxy.extraParams.id_asociado ='';
                item.store.proxy.extraParams.detalles ='edit';
                item.store.proxy.extraParams.combo ='combo';
                item.store.load();

                var store = Ext.data.StoreManager.lookup(item.config.search.store);

                store.proxy.extraParams.id_asociado ='';

                store.proxy.extraParams.detalles ='edit';
                store.proxy.extraParams.grid =false;
                store.proxy.extraParams.combo ='combo';
                store.load();


            }

                if(focus===false)
                if(item.xtype==='numberfield'||item.xtype==='textfield'||item.xtype==='textareafield')
                {item.focus('', 10);
                focus = true;
                }


            });
            // Show form
            this.showView('form');

            // Deselect grid
            var grid =  Ext.ComponentQuery.query('panel #gridpanel');

            grid.forEach(function (item) {

                item.getSelectionModel().deselectAll();
            });
            var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
            botones.forEach(function (item) {
                item.setDisabled(true);
            });
            var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
            botones.forEach(function (item) {
                item.setDisabled(true);
            });
            var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
            btnAssociate.forEach(function (item) {
                item.setDisabled(true);
            });

            var tree =  Ext.ComponentQuery.query('panel #treepanel');

            tree.forEach(function (item) {

                item.getSelectionModel().deselectAll();
            });

        }
    },

    remove: function(button, e, eOpts) {
        if((typeof eOpts)!=='undefined')
        {


            var me = this;
            var nombre='';
            var isTree=false;
            var sm;
            var aux = this.view.items.items.forEach(function (item) {
                        if(item.componentCls == 'x-panel')
                            if(item.store)
                                {nombre = item.store.storeId;

                                sm = item.getSelectionModel().selected;
                    }});
                    var grid =  Ext.ComponentQuery.query('panel #gridPanel');

                    if(sm===undefined)
                    {
                            grid.forEach(function (item) {
                        if(item.store)
                            if(nombre==item.store.storeId)
                            { sm = item.getSelectionModel().selected;

                            }

                    });}
            var tree =  Ext.ComponentQuery.query('panel #treePanel');
            tree.forEach(function (item) {
                if(item.store)
                    if(nombre==item.store.storeId)
                    {sm = item.getSelectionModel().selected;
                     isTree = true;}

            });


            var mensajeText = 'Esta seguro que desea eliminar los elementos seleccionados?';

            if(sm.length==1)
                var mensajeText = 'Esta seguro que desea eliminar el elemento seleccionado?';
            // Ask user to confirm this action
            Ext.Msg.confirm('Confirmación de Eliminar', mensajeText, function(result) {

                // User confirmed yes
                if (result == 'yes') {

                    var record = me.getViewModel().get('record'),
                        store = Ext.StoreManager.lookup(nombre);
                    // Delete record from store

        console.log(record)

                    // Deselect grid

                    var deleteItem = [];
                    sm.each(function (item) {

                        deleteItem.push(item);
                        if(isTree)
                        item.remove();
                    });

                    var erased = function(store1, operation, eOpts ) {


                        var json = Ext.JSON.decode(operation._response.responseText);

                        if (json.success)
                        {

        me.showToast(json.message,'info');


                        }
                        else{
        me.showToast(json.message,'error');


                        }
                        flag = false;
                        button.setDisabled(true);
                        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                        botones.forEach(function (item) {
                            item.setDisabled(true);
                        });
                         var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                                   btnAssociate.forEach(function (item) {
                                       item.setDisabled(true);
                                   });

                    };


                        itemDe = store.remove(deleteItem);

                        if ( deleteItem.length ==1)
                        {

                            me.showToast('El elemento ha sido eliminado satisfactoriamente','info');


                        }
                        else if(deleteItem.length >1){

                            me.showToast('Los elementos han sido eliminados satisfactoriamente','info');

                        }

                        else {
                            var menssage = 'Los elementos no se han eliminado';
                            if(deleteItem.length ==1)
                                menssage = 'El elemento no se ha eliminado';
                             me.showToast(menssage,'error');


                        }

                        var flag = true;


                        // Hide display
                        me.showView('selectMessage');
                        //Disabled Button

                        button.setDisabled(true);
                        var botonesEdit = Ext.ComponentQuery.query('panel toolbar #btnEdit');
                        botonesEdit.forEach(function (item) {
                            item.setDisabled(true);
                        });
                     var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                                   btnAssociate.forEach(function (item) {
                                       item.setDisabled(true);
                                   });
                   // }

                }


            });
        }
    },

    save: function(button, e, eOpts) {
        if((typeof eOpts)!=='undefined')
        {var nombre='';


         var aux = this.view.items.items.forEach(function (item) {
             if(item.componentCls == 'x-panel')
                 if(item.store)
                     nombre = item.store.storeId;
         });

         var windows = button.up('window');
         var form,
             mask;
         if(button.up('form')!==undefined)
                   windows=false;
         if(windows)
         {form = windows.down('form').getForm();
          mask = windows.down('form');
          // mask.mask('Guardando...');
         }
         else
         {form = this.getReferences().form.getForm();
          mask= this.getReferences().form;

         }
           console.log(form)
         var record = form.getRecord(),
             store = Ext.StoreManager.lookup(nombre);
         var me = this;

         var record_foto = [];
         // Valid

         if (this.isValid(form)) {
             mask.mask('Guardando...');
             //form.updateRecord();
             // Update associated record with values

             var nombre='';
             var campo = '';
             var asociados = [];
             form.owner.items.items.forEach(function (item) {
                 var resultree = [];
                 resultree = me.searchComponent('treepanel',item,resultree);
                 var checked = function (v) {

                     asociados.push({id: v.data.id,model: v.data.model});
                 };
                 for(var comptree in resultree)
                 {var objtree = resultree[comptree];
                  if(objtree.xtype=='treepanel')
                  {

                      var checkedstree =objtree.getChecked();
                      checkedstree.forEach(checked);



                  }
                 }

                 var resultmulti = [];
                 resultmulti = me.searchComponent('multiselector',item,resultmulti);
                 console.log(resultmulti)
                 var checkedmulti = function (v) {
                     var modelo = v.store.config.proxy.extraParams.model;
                       var asoc ={id: v.data.id,model: modelo};
                             if(v.data.escritura!==undefined)
                             asoc.escritura = v.data.escritura;
                             asociados.push(asoc);
                 };
                 for(var compmulti in resultmulti)
                 {var objmulti = resultmulti[compmulti];

                  var checkedsmulti =objmulti.store.data.items;
                  checkedsmulti.forEach(checkedmulti);


                 }

                 var resultImage = [];
                 resultImage = me.searchComponent('image',item,resultImage);
                 for(var compImage in resultImage)
                 {var objImage = resultImage[compImage];
                  if(objImage.xtype=='image')
                  {
                      var auxImage = objImage.itemId;

                      if(auxImage)
                          if(record.data[auxImage]!==undefined)
                              record_foto[auxImage]=objImage.src;




                  }
                 }

                 var result = [];
                 result = me.searchComponent('combobox',item,result);
                 for(var comp in result)
                 {var obj = result[comp];
                  if(obj.xtype=='combobox')
                  {
                      var aux1 = obj.name.replace('_id','');

                      // if(obj.inputAttrTpl)
                      //delete(record.data[aux]); Hay que arreglar en la BD que tenga relacion con el 2do nivel Ejp usuario_entidad_organismo

                      if(aux1!=obj.name)

                          delete(record.data[aux1]);//=obj.rawValue;




                  }
                 }

                 if(item.name){

                     if(item.name == 'nombre' ||item.name == 'username'||item.name == 'name')
                     { nombre = item.value;
                      campo = item.name;}
                     var      auxname = item.name.replace('_id','');


                     // if(auxname!=item.name)

                     // delete(record.data[auxname]); //=item.rawValue;
                 }});
        var write = function(store1, operation, eOpts ) {




                         if(flag)
                         {var json = Ext.JSON.decode(operation._response.responseText);

                          if (json.id !== null &&flag)
                          {flag = false;



                           store.proxy.extraParams.parent_id='';
                           store.load({
                               callback: function(s,o,e){

                                   if(windows)
                                       windows.close();
                                   else
                                   {mask.unmask(); me.showView('selectMessage');}
                                   me.showToast(json.message,'info');


                                   var tree =  Ext.ComponentQuery.query('panel treepanel');

                                   tree.forEach(function (item) {

                                       item.getSelectionModel().deselectAll();
                                   });
                                   var grid =  Ext.ComponentQuery.query('panel gridpanel');

                                   grid.forEach(function (item) {

                                       item.getSelectionModel().deselectAll();
                                   });
                                   var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                                   botonesEditar.forEach(function (item) {
                                       item.setDisabled(true);
                                   });
                                   var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                                   botones.forEach(function (item) {
                                       item.setDisabled(true);
                                   });
                                   var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                                   btnAssociate.forEach(function (item) {
                                       item.setDisabled(true);
                                   });

                               }
                           });


                          }
                         }

                     };
             // Add to store if new record

             if(nombre!=='')
                 var dt = store.findRecord(campo,nombre,0,false,false,true);

             if(asociados.length>0)
                 record.data.asociados=asociados;//Ext.JSON.encode(asociados);

             store.proxy.extraParams.parent_id='save';
             if (record.phantom) {





                 if(dt===null)//para adicionar
                 {form.updateRecord();
                  for(var foto in record_foto)
                  {
                      record.data[foto]  = record_foto[foto];
                  }
                  if(record.data.parentId===null)

                      record.data.leaf = true;
                  store.add(record);
                  var flag=true;
                  store.commitChanges();

                 }
                 else////para modificar
                     if(nombre!=='' &&nombre ===dt.data[campo])
                     {  mask.unmask();
                      me.showToast('El elemento ya existe.','error');
                      var flag=false;
                     }

                 else{
                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     if(record.data.parentId===null)

                         record.data.leaf = true;
                     store.add(record);
                     var flag=true;
                     store.commitChanges();
                 }
             }else{

                 if(dt===null)//para adicionar
                 {form.updateRecord();
                  for(var foto in record_foto)
                  {
                      record.data[foto]  = record_foto[foto];
                  }
                  if(record.data.parentId===null)

                      record.data.leaf = true;
                  //store.add(record);
                  var flag=true;
                  // store.commitChanges();

                 }else
                     if(nombre!=='' &&nombre ===dt.data[campo])//para modificar
                     {//console.log(dt)

                         mask.unmask();
                         if(dt.data.id===record.data.id)
                         {
                             var flag=true;
                             for(var foto in record_foto)
                             {
                                 record.data[foto]  = record_foto[foto];
                             }
                             form.updateRecord(record);
                             //console.log(form)
        if(asociados.length>0)
                             {
                                  form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     flag= true;


                                 store.commitChanges();
                     record.save({success:write});

                                 //me.showToast('El elemento ha sido modificado satisfactoriamente.','info');
                             }
                             me.showView('selectMessage');
                             //
                         }
                         else
                         {me.showToast('El elemento ya existe.','error');
                          var flag=false;
                         }
                     }

                 else{
                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     if(record.data.parentId===null)

                         record.data.leaf = true;
                     var flag=true;
                     store.commitChanges();

                 }


             }

             // Commit changes


             store.on('write',fn = function(store, operation, eOpts ) {


                 if(flag)
                 {var json = Ext.JSON.decode(operation._response.responseText);

                  if (json.id !== null)
                  { this.load({
                      callback: function(s,o,e){
                          flag = false;
                          mask.unmask();
                          /*   Ext.MessageBox.show({
                       title: 'Información',
                       msg: json.message,
                       buttons: Ext.MessageBox.OK,
                       //animateTarget: 'mb9',
                       //fn: showResult,
                       icon: Ext.MessageBox.INFO
                   });*/
                          me.showToast(json.message,'info');
                          me.showView('selectMessage');
                          var grid =  Ext.ComponentQuery.query('panel gridpanel');

                          grid.forEach(function (item) {

                              item.getSelectionModel().deselectAll();
                          });

                          var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                          botones.forEach(function (item) {
                              item.setDisabled(true);
                          });
                          var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                          botonesEditar.forEach(function (item) {
                              item.setDisabled(true);
                          });
                          var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                          btnAssociate.forEach(function (item) {
                              item.setDisabled(true);
                          });
                      }
                  });


                  }
                  else{

                      mask.unmask();

                      me.showToast(json.message,'error');


                  }}

             });
             // Display record
         }


        }
    },

    savelocal: function(button, e, eOpts) {
        if((typeof eOpts)!=='undefined')
        {var nombre='';


         var aux = this.view.items.items.forEach(function (item) {
             if(item.componentCls == 'x-panel')
                 if(item.store)
                     nombre = item.store.storeId;
         });

         var windows = button.up('window');
         var form,
             mask;
         if(button.up('form')!==undefined)
                   windows=false;
         if(windows)
         {form = windows.down('form').getForm();
          mask = windows.down('form');
          // mask.mask('Guardando...');
         }
         else
         {form = this.getReferences().form.getForm();
          mask= this.getReferences().form;

         }
           console.log(form)
         var record = form.getRecord(),
             store = Ext.StoreManager.lookup(nombre);
         var me = this;

         var record_foto = [];
         // Valid

         if (this.isValid(form)) {
             mask.mask('Guardando...');
             //form.updateRecord();
             // Update associated record with values

             var nombre='';
             var campo = '';
             var asociados = [];
             form.owner.items.items.forEach(function (item) {
                 var resultree = [];
                 resultree = me.searchComponent('treepanel',item,resultree);
                 var checked = function (v) {

                     asociados.push({id: v.data.id,model: v.data.model});
                 };
                 for(var comptree in resultree)
                 {var objtree = resultree[comptree];
                  if(objtree.xtype=='treepanel')
                  {

                      var checkedstree =objtree.getChecked();
                      checkedstree.forEach(checked);



                  }
                 }

                 var resultmulti = [];
                 resultmulti = me.searchComponent('multiselector',item,resultmulti);
                 console.log(resultmulti)
                 var checkedmulti = function (v) {
                     var modelo = v.store.config.proxy.extraParams.model;
                       var asoc ={id: v.data.id,model: modelo};
                             if(v.data.escritura!==undefined)
                             asoc.escritura = v.data.escritura;
                             asociados.push(asoc);
                 };
                 for(var compmulti in resultmulti)
                 {var objmulti = resultmulti[compmulti];

                  var checkedsmulti =objmulti.store.data.items;
                  checkedsmulti.forEach(checkedmulti);


                 }

                 var resultImage = [];
                 resultImage = me.searchComponent('image',item,resultImage);
                 for(var compImage in resultImage)
                 {var objImage = resultImage[compImage];
                  if(objImage.xtype=='image')
                  {
                      var auxImage = objImage.itemId;

                      if(auxImage)
                          if(record.data[auxImage]!==undefined)
                              record_foto[auxImage]=objImage.src;




                  }
                 }

                 var result = [];
                 result = me.searchComponent('combobox',item,result);
                 for(var comp in result)
                 {var obj = result[comp];
                  if(obj.xtype=='combobox')
                  {
                      var aux1 = obj.name.replace('_id','');

                      // if(obj.inputAttrTpl)
                      //delete(record.data[aux]); Hay que arreglar en la BD que tenga relacion con el 2do nivel Ejp usuario_entidad_organismo

                      if(aux1!=obj.name)

                          record.data[aux1]=obj.rawValue;




                  }
                 }

                 if(item.name){

                     if(item.name == 'nombre' ||item.name == 'username'||item.name == 'name')
                     { nombre = item.value;
                      campo = item.name;}
                     var      auxname = item.name.replace('_id','');


                     // if(auxname!=item.name)

                     // delete(record.data[auxname]); //=item.rawValue;
                 }});
        var write = function(store1, operation, eOpts ) {




                         if(flag)
                         {var json = Ext.JSON.decode(operation._response.responseText);

                          if (json.id !== null &&flag)
                          {flag = false;



                           store.proxy.extraParams.parent_id='';
                           store.load({
                               callback: function(s,o,e){

                                   if(windows)
                                       windows.close();
                                   else
                                   {mask.unmask(); me.showView('selectMessage');}
                                   me.showToast(json.message,'info');


                                   var tree =  Ext.ComponentQuery.query('panel treepanel');

                                   tree.forEach(function (item) {

                                       item.getSelectionModel().deselectAll();
                                   });
                                   var grid =  Ext.ComponentQuery.query('panel gridpanel');

                                   grid.forEach(function (item) {

                                       item.getSelectionModel().deselectAll();
                                   });
                                   var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                                   botonesEditar.forEach(function (item) {
                                       item.setDisabled(true);
                                   });
                                   var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                                   botones.forEach(function (item) {
                                       item.setDisabled(true);
                                   });
                                   var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                                   btnAssociate.forEach(function (item) {
                                       item.setDisabled(true);
                                   });

                               }
                           });


                          }
                         }

                     };
             // Add to store if new record

             if(nombre!=='')
                 var dt = store.findRecord(campo,nombre,0,false,false,true);

             if(asociados.length>0)
                 record.data.asociados=asociados;//Ext.JSON.encode(asociados);

             store.proxy.extraParams.parent_id='save';
             if (record.phantom) {





                 if(dt===null)//para adicionar
                 {form.updateRecord();
                  for(var foto in record_foto)
                  {
                      record.data[foto]  = record_foto[foto];
                  }
                  if(record.data.parentId===null)

                      record.data.leaf = true;
                  store.add(record);
                  var flag=true;
                  //store.commitChanges();

                 }
                 /*else////para modificar
                     if(nombre!=='' &&nombre ===dt.data[campo])
                     {  mask.unmask();
                      me.showToast('El elemento ya existe.','error');
                      var flag=false;
                     }*/

                 else{
                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     if(record.data.parentId===null)

                         record.data.leaf = true;
                     store.add(record);
                     var flag=true;
                    // store.commitChanges();
                 }
             }else{

                 if(dt===null)//para adicionar
                 {form.updateRecord();
                  for(var foto in record_foto)
                  {
                      record.data[foto]  = record_foto[foto];
                  }
                  if(record.data.parentId===null)

                      record.data.leaf = true;
                  //store.add(record);
                  var flag=true;
                  // store.commitChanges();

                 }else
                     if(nombre!=='' &&nombre ===dt.data[campo])//para modificar
                     {//console.log(dt)

                         mask.unmask();
                         if(dt.data.id===record.data.id)
                         {
                             var flag=true;
                             for(var foto in record_foto)
                             {
                                 record.data[foto]  = record_foto[foto];
                             }
                             form.updateRecord(record);
                             //console.log(form)
        if(asociados.length>0)
                             {
                                  form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     flag= true;


                                // store.commitChanges();
                     record.save({success:write});

                                 //me.showToast('El elemento ha sido modificado satisfactoriamente.','info');
                             }
                             me.showView('selectMessage');
                             //
                         }
                         else
                         {me.showToast('El elemento ya existe.','error');
                          var flag=false;
                         }
                     }

                 else{
                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     if(record.data.parentId===null)

                         record.data.leaf = true;
                     var flag=true;
                     //store.commitChanges();

                 }


             }

             mask.unmask();
             me.showView('selectMessage');
                                   me.showToast('El elemento ha sido insertado satisfactoriamente.','info');

             // Commit changes


             /*store.on('write',fn = function(store, operation, eOpts ) {


                 if(flag)
                 {var json = Ext.JSON.decode(operation._response.responseText);

                  if (json.id !== null)
                  { this.load({
                      callback: function(s,o,e){
                          flag = false;
                          mask.unmask();

                          me.showToast(json.message,'info');
                          me.showView('selectMessage');
                          var grid =  Ext.ComponentQuery.query('panel gridpanel');

                          grid.forEach(function (item) {

                              item.getSelectionModel().deselectAll();
                          });

                          var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                          botones.forEach(function (item) {
                              item.setDisabled(true);
                          });
                          var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                          botonesEditar.forEach(function (item) {
                              item.setDisabled(true);
                          });
                          var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                          btnAssociate.forEach(function (item) {
                              item.setDisabled(true);
                          });
                      }
                  });


                  }
                  else{

                      mask.unmask();

                      me.showToast(json.message,'error');


                  }}

             });*/
         }
             // Display record
         }



    },

    saveTreeWindows: function(button, e, eOpts) {
        if((typeof eOpts)!=='undefined')
        {var nombreStore='';
         var store='';

         var aux = this.view.items.items.forEach(function (item) {
             if(item.componentCls == 'x-panel')
                 if(item.store){
                     nombreStore = item.store.storeId;
                     store =item.store;
                 }
         });

         var windows = button.up('window');
         var form,
             mask;
         if(windows)
         {form = windows.down('form').getForm();
          mask = windows.down('form');

         }
         else
         {form = this.getReferences().form.getForm();
          mask= this.getReferences().form;
          //  mask.mask('Guardando...');
         }

         var record = form.getRecord();
        console.log(record)

         var me = this;
         var record_foto = [];

         // Valid
         if (this.isValid(form)) {
             mask.mask('Guardando...');
             // Update associated record with values

             var nombre='';
             var campo = '';
             var asociados = [];
             var asociadosmulti = [];
             form.owner.items.items.forEach(function (item) {
                 var resultree = [];
                 resultree = me.searchComponent('treepanel',item,resultree);
                 var checked = function (v) {

                     asociados.push({id: v.data.id,model: v.data.model});
                 };
                 for(var comptree in resultree)
                 {var objtree = resultree[comptree];
                  if(objtree.xtype=='treepanel')
                  {

                      var checkedstree =objtree.getChecked();
                      checkedstree.forEach(checked);



                  }
                 }

                  var resulgrid = [];
                 resulgrid = me.searchComponent('gridpanel',item,resultree);
                 var checkedgrid = function (v) {

                     v.data.model = v.store.proxy.extraParams.model;
                     v.data.esquema = v.store.proxy.extraParams.esquema_asociado;


                             asociados.push(v.data);
                 };
                 for(var compgrid in resulgrid)
                 {var objgrid = resulgrid[compgrid];

        console.log(objgrid)
        if(objgrid.xtype!=='treepanel')
        {var checkedsgrid =objgrid.store.data.items;
                      checkedsgrid.forEach(checkedgrid);
        }



                 }
                 var resultmulti = [];
                         resultmulti = me.searchComponent('multiselector',item,resultmulti);
                         var checkedmulti = function (v) {
         var modelo = v.store.config.proxy.extraParams.model;
                             asociados.push({id: v.data.id,model: modelo});
                         };
                         for(var compmulti in resultmulti)
                         {var objmulti = resultmulti[compmulti];

                              var checkedsmulti =objmulti.store.data.items;
                              checkedsmulti.forEach(checkedmulti);


                         }


                 //Adicionando imagen base64 a los record fotos
                 var resultImage = [];
                 resultImage = me.searchComponent('image',item,resultImage);
                 for(var compImage in resultImage)
                 {var objImage = resultImage[compImage];
                  if(objImage.xtype=='image')
                  {
                      var auxImage = objImage.itemId;

                      if(auxImage)
                          if(record.data[auxImage]!==undefined)
                              record_foto[auxImage]=objImage.src;




                  }
                 }

                         /*var resultDisplay = []; Hay q arreglar q quite los displyfield dado q no son campos existenten en las tablas
                          resultDisplay = me.searchComponent('displayfield',item,resultDisplay);
                          for(var compDisplay in resultDisplay)
                          {var objDisplay = resultDisplay[compDisplay];

                           if(objDisplay.xtype==='displayfield')
                           {

                                       var auxDisplay = objDisplay.name;
                                     //   console.log(resultDisplay.hasOwnProperty(objDisplay))
                                         for(var displ in record.data)
                                          {
                                                  if(displ==auxDisplay)
                                                  {console.log(displ);
                                          console.log(auxDisplay);}
                                         }
                                         delete(record.data[auxDisplay]);
                           }
                          }*/

                 var result = [];
                 result = me.searchComponent('combobox',item,result);
                 for(var comp in result)
                 {var obj = result[comp];
                  if(obj.xtype=='combobox')
                  {
                      var aux1 = obj.name.replace('_id','');

                      if(aux1!=obj.name)

                          delete(record.data[aux1]);//=obj.rawValue;




                  }
                 }


                 if(item.name ){
                     if(item.name == 'nombre' ||item.name == 'username'||item.name == 'name')
                     { nombre = item.value;
                      campo = item.name;
                     }
                     var aux = item.name.replace('_id','');


                     if(aux!=item.name || item.reference===undefined)
                     {var name_comp = item.name;
                      delete(record.data[aux]); //= item.rawValue;
                      if(item.selection)
                          record.data[name_comp]=item.selection.id;


                     }

                     //if(record.data.parent_id=='root')

                 }});

             // Add to store if new record
             //form.updateRecord();
             if(asociados.length>0)
                 record.data.asociados=asociados;//Ext.JSON.encode(asociados);

             //record.data.children=false;
             //record.data.text = nombre;
             nombreStore = record.entityName.replace('cerodatax.model.','');
             store = Ext.StoreManager.lookup(nombreStore);

             store.proxy.extraParams.parent_id='save';
             //verificar prk debe de realizar store y quedarse donde mismo estaba en el caso de q filtree y asocie al mismo tiempo
             store.clearFilter();
             var flag=false;
             var write = function(store1, operation, eOpts ) {




                 if(flag)
                 {var json = Ext.JSON.decode(operation._response.responseText);

                  if (json.id !== null &&flag)
                  {flag = false;



                   store.proxy.extraParams.parent_id='';
                   store.load({
                       callback: function(s,o,e){

                           if(windows)
                               windows.close();
                           else
                           {mask.unmask(); me.showView('selectMessage');}
                           me.showToast(json.message,'info');


                           var tree =  Ext.ComponentQuery.query('panel treepanel');

                           tree.forEach(function (item) {

                               item.getSelectionModel().deselectAll();
                           });
                           var grid =  Ext.ComponentQuery.query('panel gridpanel');

                           grid.forEach(function (item) {

                               item.getSelectionModel().deselectAll();
                           });
                           var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                           botonesEditar.forEach(function (item) {
                               item.setDisabled(true);
                           });
                           var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
                           botones.forEach(function (item) {
                               item.setDisabled(true);
                           });
                           var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
                           btnAssociate.forEach(function (item) {
                               item.setDisabled(true);
                           });

                       }
                   });


                  }
                 }

             };

             var dt = store.findRecord(campo,nombre,0,false,false,true);
             console.log(record)
             if (record.phantom) {



                 if(dt===null)
                 {

                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     if(record.data.parentId===null)

                         record.data.leaf = true;
                     flag= true;
                     record.save({success:write});



                 }
                 else
                     if(nombre!=='' &&nombre ===dt.data[campo])
                     {
                         //store.remove(record);
                         if(dt.data.id===record.data.id)
                         { if(asociados.length>0)
                             {
                                  form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     flag= true;
                     record.save({success:write});
                             }
                             if(windows)
                                 windows.close();
                             else
                                 me.showView('selectMessage');
                         }
                         else
                             me.showToast('El elemento ya existe.','error');

                         mask.unmask();
                         return;
                     }
                 else{
                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     flag= true;
                     record.save({success:write});




                 }

             }else{
                 if(dt===null)
                 {form.updateRecord();
                  for(var foto in record_foto)
                  {
                      record.data[foto]  = record_foto[foto];
                  }
                  flag= true;
                  record.save({success:write,failure: write});



                 }else
                     if(nombre!=='' &&nombre ===dt.data[campo])
                     {

                         //store.remove(record);
                         if(dt.data.id===record.data.id)
                         {
                             if(windows)
                                 { form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     record.save({success:write});

                     flag= true;}
                             if(windows)
                                 windows.close();
                             else
                             {me.showView('selectMessage');
                              mask.unmask();}
                         }
                         else
                             me.showToast('El elemento ya existe.','error');



                     }
                 else{

                     form.updateRecord();
                     for(var foto in record_foto)
                     {
                         record.data[foto]  = record_foto[foto];
                     }
                     record.save({success:write});

                     flag= true;


                 }


             }

         }


        }
    },

    onTreePanelSelectionChange: function(model, selected, eOpts) {
                      var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
                       var botonesRemove =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
        var btnAssociate =  Ext.ComponentQuery.query('panel toolbar #btnAssociate');


                        if(selected.length===0 )
                         {this.getViewModel().set('record', selected[selected.length-1]);

                        botones.forEach(function (item) {
                        item.setDisabled(true);
                        });
                            botonesRemove.forEach(function (item) {
                        item.setDisabled(true);
                        });
                             btnAssociate.forEach(function (item) {
                        item.setDisabled(true);
                        });
                         }
                        else{
                            if(selected.length>1)

                        botones.forEach(function (item) {
                        item.setDisabled(true);
                        });
                        else
                            botones.forEach(function (item) {
                        item.setDisabled(false);
                        });
                botonesRemove.forEach(function (item) {
                        item.setDisabled(false);
                });
                        btnAssociate.forEach(function (item) {
                        item.setDisabled(false);
                });
                        }


    },

    onTreePanelBeforeItemExpand: function(nodeinterface, eOpts) {


           var store= nodeinterface.getTreeStore();
            store.proxy.extraParams.parent_id = nodeinterface.data.id;
            //store.clearFilter();
    },

    onTreePanelBeforeItemExpand1: function(nodeinterface, eOpts) {


           var store= nodeinterface.getTreeStore();
            store.proxy.extraParams.parent_id = nodeinterface.data.id;
         var r = this.getViewModel().get('record');

        if(r!==null)
            {store.proxy.extraParams.id_asociado =r.data.id;

                   store.proxy.extraParams.detalles ='detalles';
                    store.proxy.extraParams.detalles ='edit';
                    store.proxy.extraParams.combo ='';
                }
                else{
                   // store.proxy.extraParams.id_asociado ='';

                    store.proxy.extraParams.detalles ='edit';
                    store.proxy.extraParams.combo ='';
                }
    },

    onTreePanelAfterItemExpand: function(node, index, item, eOpts) {
        var r = this.getViewModel().get('record');

                if(r!==null)
                {var store =  r.getTreeStore();
                    store.proxy.extraParams.parent_id = '';

                }
    },

    onTreePanelSelect: function(rowmodel, record, index, eOpts) {
        // Set selected record

          this.getViewModel().set('record', record);
                  var ref = this.getReferences();
                if(ref!==null)
        {var referencia = this.getReferences().display;
         //console.log(referencia.down('treepanel'))
         if(referencia.down('treepanel')!==null){
        var store = referencia.down('treepanel').store;
        store.proxy.extraParams.id_asociado = record.data.id;
        store.proxy.extraParams.parent_id ='';
        store.proxy.extraParams.detalles = 'detalles';
        store.load();
             }
        }
        // Show detairecordls
        this.showView('details');
    },

    refresh: function(bottom) {
        if(bottom!==null)
        {var tree = bottom.up('treepanel');
        var grid = bottom.up('gridpanel');
        if(grid)
        {
            grid.store.clearFilter();
            grid.store.proxy.extraParams.combo ='';
            grid.store.load();
            grid.getSelectionModel().deselectAll();

        }
        else if(tree)
        {tree.store.proxy.extraParams.parent_id = '';
         tree.store.clearFilter();
         tree.store.load();

         tree.getSelectionModel().deselectAll();

        }
        }
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');
        botones.forEach(function (item) {
            item.setDisabled(true);
        });
        var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');
        botones.forEach(function (item) {
            item.setDisabled(true);
        });
        var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');
        btnAssociate.forEach(function (item) {
            item.setDisabled(true);
        });
        this.showView('selectMessage');
    },

    associate: function(button, e, eOpts) {
        this.model='';
        this.win='';
        var me = this;
        var aux = this.view.xtype;

        var asociar = button.baseParams;
        this.getWinPanel(aux,asociar);
        win = this.win;
        model = this.model;



        var vista = Ext.create('widget.'+win);
        vista.title = 'Asociar '+vista.title;
        form = vista.down('form').getForm();


        var record = this.getViewModel().get('record');


        form.owner.items.items.forEach(function (item) {

            if(item.xtype=='treepanel')
            {
                if(record!==null)
                    item.store.proxy.extraParams.id_asociado =record.data.id;
                else
                    item.store.proxy.extraParams.id_asociado ='';
                item.store.proxy.extraParams.parent_id ='';
                item.store.proxy.extraParams.detalles ='edit';
                item.store.proxy.extraParams.combo ='combo';

                item.store.load();
            }
            if(item.xtype=='tabpanel')
            {  var result = [];
             result = me.searchComponent('combobox',item,result);
             for(var comp in result)
             {var obj = result[comp];
              if(obj.xtype=='combobox')
              {
                  if(record.data[obj.name]!=='')
                      obj.setDisabled(false);
                  if(obj.store.proxy.extraParams)
                  { obj.store.proxy.extraParams.combo ='combo';
                   obj.store.load({   scope: this,
                                   callback: function (records, operation, success) {

                                       obj.store.proxy.extraParams.combo ='';
                                   }});
                  }}
             }

             var resultree = [];
             resultree = me.searchComponent('treepanel',item,resultree);
             for(var comptree in resultree)
             {var objtree = resultree[comptree];
              if(objtree.xtype=='treepanel')
              {    if(record!==null)
                  objtree.store.proxy.extraParams.id_asociado =record.data.id;
               else
                   objtree.store.proxy.extraParams.id_asociado ='';
               objtree.store.proxy.extraParams.parent_id ='';
               objtree.store.proxy.extraParams.detalles ='edit';
               objtree.store.proxy.extraParams.combo ='combo';

               objtree.store.load();
              }
             }


            }
            if(item.xtype=='combobox')
            {if(record.data[item.name]!=='')
                item.setDisabled(false);
             if(item.store.proxy.extraParams)
             { item.store.proxy.extraParams.combo ='combo';
              item.store.load({   scope: this,
                               callback: function (records, operation, success) {

                                   item.store.proxy.extraParams.combo ='';
                               }});
             }}
            if(item.xtype=='multiselector')
            {
                if(record!==null)
                    item.store.proxy.extraParams.id_asociado =record.data.id;
                else
                    item.store.proxy.extraParams.id_asociado ='';
                item.store.proxy.extraParams.detalles ='edit';
                item.store.proxy.extraParams.combo ='combo';
                item.store.load();

                var store = Ext.data.StoreManager.lookup(item.config.search.store);

                store.proxy.extraParams.id_asociado ='';

                store.proxy.extraParams.detalles ='edit';
                store.proxy.extraParams.grid =false;
                store.proxy.extraParams.combo ='combo';
                store.load();


            }


        });
        // Show form hay q quitar los campos innesesarios.

        for(var obj in record.data)
        {var aux1 = obj.replace('_id','');

         if(aux1!=obj)
             delete(record.data[aux1]);
        }
        form.loadRecord(record);
        vista.show();
    },

    onComboboxSelect: function(combo, record, eOpts) {
        var form =combo.up('form');
        var acciones = combo.queryParam.split(',');

        for(var accion in acciones)
        {

            var campo = acciones[accion].split(':');
            var item = form.down('combobox[name='+campo[0]+']');


            item.setValue('');
            if(campo[1]==='false')
            { item.setDisabled(false);
             if(record!==null)
             {var filter = [];
              filter.campo_id = record.toString();
              item.store.proxy.extraParams.combo='combo';
              filter.push({value:record.id.toString(),name_id:combo.name.split('_')[0]+'_id'});
              item.store.proxy.extraParams.filter=Ext.JSON.encode(filter);

              item.store.load({   scope: this,
                               callback: function (records, operation, success) {
                                   item.store.proxy.extraParams.combo = '';
                                   item.store.proxy.extraParams.filter ='';
                               }});
             }
            }
            else {
                item.setDisabled(true);
            }
        }
    },

    onComboboxSelect1: function(combo, record, eOpts) {
        this.onComboboxSelect(combo,record,eOpts);
    },

    onSliderChange: function(slider, newValue, thumb, eOpts) {
        slider.setFieldLabel(slider.config.fieldLabel +' '+ newValue);

    },

    onSliderChange1: function(slider, newValue, thumb, eOpts) {
        slider.setFieldLabel(slider.config.fieldLabel +' '+ newValue);

    },

    searchComponent: function(xtype, comp, result) {
        if(comp.xtype===xtype)
            result.push(comp);

        if(comp.items)
            {
                var items = comp.items;
                if(comp.items.items)
                  items = comp.items.items;

                for(var item in items)
                    {
                        this.searchComponent(xtype,items[item],result);
                    }
            }
        return result;
    },

    onToolbarAfterRender: function(component, eOpts) {

        var items = component.items.items;
        for(var item in items)
        {
            var obj= items[item];

            if(obj.itemId==='btnAdd')
            {obj.setGlyph('xf055@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" >Adicionar (Ctrl+Mayus+N) </span><span> Adiciona un elemento en la lista.</span>');
            }
            if(obj.itemId==='btnEdit')
            {obj.setGlyph('xf044@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Editar (Ctrl+E) </span><span> Edita un elemento de una lista.</span>');
            }
            if(obj.itemId==='btnRemove')
            {obj.setGlyph('xf056@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Eliminar (Ctrl+D) </span><span> Elimina elemento(s) de una lista.</span>');
            }
            if(obj.itemId==='btnRefresh')
            {obj.setGlyph('xf01e@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Actualizar (Ctrl+A) </span><span> Actualiza lista de elementos.</span>');
            }
            if(obj.itemId==='btnAssociate')
            {obj.setGlyph('xf0ae@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Asociar (Ctrl+S) </span><span> Asocia elementos de una lista.</span>');
            }

            if(obj.itemId==='btnImport')
            {obj.setGlyph('xf56f@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Importar (Ctrl+Alt+I) </span><span> Importar lista de elementos.</span>');
            }

            if(obj.itemId==='btnExport')
            {obj.setGlyph('xf56e@FontAwesome');
             obj.setTooltip('<span style=" font-weight:bold" > Exportar (Ctrl+Alt+E) </span><span> Exportar lista de elementos.</span>');
            }
            // obj.setScale('medium');
            // obj.scale='medium';
            obj.tooltipType='title';

        }


    },

    searchLabel: function(comp, result, is_grid) {
        //Funcion para construir el encabezado de los grid y tree panel
        if(comp.inputType !='password')
            if(comp.xtype==='displayfield'|| comp.xtype==='textfield'||comp.xtype==='textareafield'||comp.xtype==='numberfield' ||comp.xtype==='checkboxfield' ||comp.xtype==='datefield' ||comp.xtype==='combobox' ||comp.xtype==='slider' ||comp.xtype==='filefield' )
            {

                var xtype = 'gridcolumn';

                var listeners = '';
                var lockable = '';
                var locked = '';
                var format= '';
                var width = '';
                var renderer = '';
                var groupable = '';

                var dataIndex = comp.name;
                if (comp.name !='carnet_identidad') // arreglar este problema es prk el _id de carnet coincide o los combobox
                    dataIndex = comp.name.replace('_id','');
                var emptyText = 'Ingrese el texto del filtro...';
                var filter = {
                    type: 'string',dataIndex: dataIndex,emptyText:emptyText
                };
                if (comp.name =='nombre'||comp.name =='foto'||comp.name =='logotipo')
                {if(is_grid===true)
                {lockable = true;
                 locked= true;
                }
                 if(comp.name =='nombre' &&is_grid===false)
                 {xtype = 'treecolumn';
                  width = 200;
                 }
                 /*if(comp.name =='nombre' &&is_grid===true)
             {
                 width = 200;
             }*/
                 if(comp.name =='foto'||comp.name =='logotipo')
                 {
                     width = 200;
                     groupable = false;

                     filter = '';


                     var clas = 'x-fa fa-'+comp.icono;//fa-building';



                     var  renderer= function(value, metaData, record, rowIndex, colIndex, store, view) {


                         if(record.data.systema===undefined)
                         {if(value!==''&& value!==null&& value!==undefined)
                             return '<img src="'+value+'" height="30px" style="float:left;margin:0 10px 5px 0">';
                          else return '<div class="'+clas+'" height="30px" style="    font-family: FontAwesome; float: left; font-size: xx-large; line-height: 1; margin-left: 13px;">';
                         }
                         else{
                             if(record.data.systema)
                             {var systema = 'x-fa fa-'+value;
                              return '<div class="'+systema+'" height="30px" style="    font-family: FontAwesome; float: left; font-size: xx-large; line-height: 1; margin-left: 13px;">';
                             }
                             else{
                                 if(value!==''&& value!==null)
                                     return '<img src="'+value+'" height="30px" style="float:left;margin:0 10px 5px 0">';
                             }
                         }

                     };
                 }
                }
                switch(comp.xtype)
                {
                    case 'numberfield':{
                        xtype = 'numbercolumn';
                        filter = {
                            type: 'numeric',dataIndex: dataIndex,emptyText:'Entre el número...'
                        };
                        break;
                    }
                    case 'datefield':{
                        xtype = 'datecolumn';
                        format = 'Y-m-d';
                        filter = {
                            type: 'date',fields:{
                                lt: {
                                    text: 'Antes'
                                },
                                gt: {
                                    text: 'Después'
                                },
                                eq: {
                                    text: 'En'
                                }
                            },dateFormat: format,dataIndex: dataIndex
                        };
                        break;
                    }
                    case 'checkboxfield':{
                        xtype = 'checkcolumn';
                        listeners=  {beforecheckchange:  function(){return false;}};
                        filter = {
                            type: 'boolean',noText:'No',yesText:'Si',dataIndex: dataIndex
                        };
                        break;
                    }

                }

                var column = {
                    xtype: xtype,
                    dataIndex: dataIndex,
                    header: comp.fieldLabel,
                    sortable: true,
                    groupable:groupable,
                    // locked:locked,
                    // lockable:lockable,
                    // width:width,
                    align: 'left',
                    format:format,
                    renderer:renderer,

                    listeners:listeners,
                    filter:filter
                };


                var index = result.lastIndexOf(column);
                //validar q no se repitan las columnas como el caso del usuario confirmar contrase;a
                if(index===-1)
                {
        if(comp.fieldLabel!==undefined)
                    result.push(column);}

            }

        if(comp.items)
        {
            var items = comp.items.items;

            for(var item in items)
            {
                if(items[item].xtype==='panel'||items[item].xtype==='fieldset'||items[item].xtype==='container')
                {
                    var aux = items[item].items.items;
                    var columns=[];


                    for (var j in aux)
                    {
                        this.searchLabel(aux[j],columns,is_grid);
                    }
                    var column = {
                        xtype: 'gridcolumn',
                        header: items[item].title,
                        sortable: false,
                        //groupable:false,
                        align: 'center',
                        columns:columns,

                    };
        console.log(column)
                    if(items[item].title!==undefined && columns.length!==0)
                    result.push(column);


                }
                if(comp.xtype==='tabpanel')
                    this.searchLabel(items[item],result,is_grid);

            }
        }

        if((comp.items===undefined && comp.xtype===undefined))
        {

            for(var item in comp)
            {

                this.searchLabel(comp[item],result,is_grid);
            }
        }
        if(result.length!==0)
        return result;
    },

    onGridPanelItemDblClick: function(dataview, record, item, index, e, eOpts) {
        console.log(dataview)//en desarrollo para el keymap y click doble ditable
    },

    getWinPanel: function(aux, asociar) {
        var model = '';
        var win = '';
        var ethis =this;
        console.log(asociar)
        if (asociar === undefined)
            asociar = '';

        {

                           var alias = Ext.data.StoreManager.lookup('nomenclador.Alias').data.items;
                          for(var alia in alias)
                              {
                                  var namealias =  alias[alia].data.nombre;


                                  model =aux.replace(namealias,'model.');
                 win = aux.replace(namealias,'')+asociar+'Form';
                       if(aux!=model)
                { break;
                }

                              }
         this.model= model;
        this.win=win;


        }


    },

    onComboboxSelectEntidad: function(combo, record, eOpts) {
         var form =combo.up('form');
                        var acciones = combo.queryParam.split(',');

                                for(var accion in acciones)
                                {

                                    var campo = acciones[accion].split(':');

                                    var item = form.down('treepanel[title='+campo[0]+']');


                        //item.setValue('');
                                    if(campo[1]==='false')
                                        { item.setDisabled(false);
                                            if(record!==null)
                        {var filter = [];
                                filter.campo_id = record.toString();
                                item.store.proxy.extraParams.combo='combo';

                                filter.push({value:record.id.toString(),name_id:combo.name});
                                item.store.proxy.extraParams.filter=Ext.JSON.encode(filter);

                                item.store.load({   scope: this,
                                    callback: function (records, operation, success) {
                                         item.clearFilters();
                                        item.store.proxy.extraParams.combo = '';
                                        item.store.proxy.extraParams.filter ='';
                                    }});
                        }
                                        }
                                        else {
                                            item.setDisabled(true);
                                        }
                                }
    },

    onFilefieldChange: function(filefield, value, eOpts) {
        //Metodo que embebe la imagen del cliente en el navegador
        var input = filefield.button.fileInputEl.dom;

             var me = this;
                if (input.files && input.files[0]) {

                    var reader = new FileReader();

                    reader.onload = function (e) {
        //console.log(reader)

        var form =filefield.up('form');

                var resulimage = [];
                                    resulimage = me.searchComponent('image',form,resulimage);
                                 for(var compimage in resulimage)
                                            {var objimage = resulimage[compimage];
                                                 if(objimage.xtype=='image')
                                        {

                                            //console.log(objimage)
                                          // console.log(e.target.result)
                                            if(objimage.itemId=='foto'||objimage.itemId=='logotipo')
                                            {objimage.setHidden(false);
                                             console.log(objimage)
                                                objimage.setSrc(e.target.result);

                                            }else objimage.setHidden(true);

                                        }
                                            }



                    };



                    reader.readAsDataURL(input.files[0]);

                }


    },

    configGridPanel: function(gridPanel, columns) {
        gridPanel.viewConfig = {
                        emptyText: 'No existen elementos que mostrar.',
                        deferEmptyText: false,
                        loadMask: true,
                        loadingText: 'Cargando Elementos...'
                    };
        gridPanel.columns = columns;
        gridPanel.plugins= [
                                    {
                                        ptype: 'gridfilters',
                                        menuFilterText: 'Buscar',
                                        encode:true

                                    }
                                ];
                                gridPanel.selModel= {
                                    selType: 'rowmodel',
                                    mode: 'MULTI'
                                };

    },

    createDetails: function(config, columns) {
        var resultpanel =[];
        this.searchComponent('panel', config, resultpanel);
        var configDetails;
        for(var pan in resultpanel)
            if(resultpanel[pan].reference==="details")
                configDetails = resultpanel[pan];



        var details = [];
        var rendcheck = function(value1){ if(value1===true)return 'Si'; return 'No';};
        var rendimage = function(value, metaData, record, rowIndex, colIndex, store, view) {



                            if(value!==undefined)
                            {
                                if(value.length <40){
                                    var systema = 'x-fa fa-'+value;
                                        return '<div class="'+systema+'" height="30px" style="    font-family: FontAwesome; float: left; font-size: xx-large; line-height: 1; margin-left: 13px;">';
                            }
                            else{
                                 if(value!==''&& value!==null)
                                 return '<img src="'+value+'" height="30px" style="float:left;margin:0 10px 5px 0">';

                            }
                            }
                            };
        for(var col in columns)
        {
            var value='{record.' +columns[col].dataIndex+'}';
            var  fieldLabel = columns[col].header;
            var renderer = '';

            if(columns[col].xtype==='checkcolumn')
            {

                renderer = rendcheck;
            }

            if(columns[col].dataIndex==='foto')
            {

                var  renderer= rendimage;


            }
            var field =  {
                xtype: 'displayfield',
                fieldLabel: fieldLabel,
                bind: {
                    value: value
                },
                renderer:renderer

            };
            details.push(field);

        }

        configDetails.items = details;
    },

    formatForm: function(entrada) {
        var form = entrada.items;
        if(entrada.items.items)
            form = entrada.items.items;

        for(var campos in form)
        {var xtype = form[campos].xtype;

         if(xtype === 'tabpanel'||xtype === 'panel'||xtype === 'fieldset'||xtype === 'container')
         {


             this.formatForm(form[campos]);
         }
         if(form[campos].allowBlank!==undefined)

             if(form[campos].allowBlank===false)
             {

                 if(form[campos].initialConfig!==undefined)
                     form[campos].initialConfig.afterLabelTextTpl = ['<span style="color:#D94E37; font-weight:bold" data-qtip="Requerido"> * </span>'];
                 else
                     form[campos].afterLabelTextTpl = ['<span style="color:#D94E37; font-weight:bold" data-qtip="Requerido"> * </span>'];

             }


         if(xtype === 'combobox')
         {

             if(form[campos].initialConfig!==undefined){
                 form[campos].initialConfig.emptyText = 'Seleccione';
                 form[campos].initialConfig.queryMode ='local';
             }else{
                 form[campos].emptyText = 'Seleccione';
                 form[campos].queryMode ='local';
             }
         }
         else if(xtype === 'numberfield')
         {

             if(form[campos].initialConfig!==undefined){
                 form[campos].initialConfig.decimalPrecision = 3;
                 form[campos].initialConfig.decimalSeparator ='.';
             }else{
                 form[campos].decimalPrecision = 3;
                 form[campos].decimalSeparator ='.';
             }

         }
          else if(xtype === 'datefield')
         {

             if(form[campos].initialConfig!==undefined){
                 form[campos].initialConfig.format = 'Y-m-d';
                 form[campos].initialConfig.submitFormat ='Y-m-d';
             }else{
                 form[campos].format = 'Y-m-d';
                 form[campos].submitFormat ='Y-m-d';
             }

         }
         else if(xtype === 'image')
         {

             if(form[campos].initialConfig!==undefined){
                 form[campos].initialConfig.alwaysOnTop = true;
                 form[campos].initialConfig.shim =false;
                 form[campos].initialConfig.frame =false;
                 form[campos].initialConfig.height =100;
                 form[campos].initialConfig.width =100;
                 form[campos].initialConfig.alt ='Cargando Foto...';
             }else{
                 form[campos].alwaysOnTop = true;
                 form[campos].shim =false;
                 form[campos].frame =false;
                 form[campos].height =100;
                 form[campos].width =100;
                 form[campos].alt ='Cargando Foto...';
             }


         }
         else if(xtype === 'filefield')
         {

             if(form[campos].initialConfig!==undefined){
                 form[campos].initialConfig.maxLength = 255;
                 form[campos].initialConfig.emptyText = 'Seleccione';
                 form[campos].initialConfig.buttonText ='Examinar...';
                 form[campos].initialConfig.listeners ={change: 'onFilefieldChange'};
             }
             else{
                 form[campos].maxLength = 255;
                 form[campos].emptyText = 'Seleccione';
                 form[campos].buttonText ='Examinar...';
                 form[campos].listeners ={change: 'onFilefieldChange'};
             }


         }
         if(form[campos].inputType ==='password')
         {
             if(form[campos].initialConfig!==undefined)
             {
              form[campos].initialConfig.maxLength = 60;
              form[campos].initialConfig.regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,100}$/;
              form[campos].initialConfig.regexText = 'La contraseña debe tener más de 6 caracteres, al menos un caracter numérico y una letra mayúscula.';
             }
             else{
                 form[campos].maxLength = 60;
                 form[campos].regex = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{6,100}$/;
                 form[campos].regexText = 'La contraseña debe tener más de 6 caracteres, al menos un caracter numérico y una letra mayúscula.';

             }
         }
         else if(form[campos].inputType ==='tel')
         {form[campos].maskRe = /\d/; }
         else if(form[campos].inputType ==='email')
         {

             if(form[campos].initialConfig!==undefined)
             {form[campos].initialConfig.emptyText = 'usuario@dominio.com';
              form[campos].initialConfig.vtype ='email';
             }else{
                 form[campos].emptyText = 'usuario@dominio.com';
                 form[campos].vtype ='email';
             }

         }

        }
    },

    showToast: function(s, tipo) {
        /*var icon =[['error', 'Error'],
                        ['info', 'Información'],
                        //['question', 'Question'],
                        ['warning', 'Warning']];*/
        var title,
            icon;
        if(tipo ==='info')
            {
                title = 'Información';
        icon = 'xf05a@FontAwesome';
            }
        else if(tipo ==='error')
            {
                title = 'Error';
        icon = 'xf057@FontAwesome';
            }
        else if(tipo ==='warning')
            {
                title = 'Peligro';
        icon = 'xf071@FontAwesome';
            }
        else if(tipo ==='question')
            {
                title = 'Pregunta';
        icon = 'xf059@FontAwesome';
            }

        //var html = '<span   height="30px"  style="float: left; font-size: xx-large; line-height: 1; margin-left: 13px;">'+s;
        //iconCls probar
        Ext.toast({
             html: s ,
            glyph:icon,
                    closable: false,
                    align: 't',
            title:title,

           // style:'font-family: FontAwesome',
                    slideInDuration: 400,
                    minWidth: 400
                });
    },

    isValid: function(form) {
        var me = form,
                    invalid;
                Ext.suspendLayouts();
                invalid = me.getFields().filterBy(function(field) {
                    if(field.up('form').up('panel').up('form')===undefined)
                    return !field.validate();
                });
                Ext.resumeLayouts(true);
                return invalid.length < 1;
    },

    cancelEdit1: function(button, e, eOpts) {
        this.cancelEdit(button, e, eOpts);
    }

});
