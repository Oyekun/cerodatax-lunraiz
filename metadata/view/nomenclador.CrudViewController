{
    "type": "Ext.app.ViewController",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userAlias": "nomencladorcrud",
        "designer|userClassName": "nomenclador.CrudViewController"
    },
    "designerId": "69bf6b71-2fe5-49f9-bf78-620d2935514b",
    "cn": [
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "view"
                ],
                "fn": "showView",
                "implHandler": [
                    " ",
                    "        var referencia = this.getReferences();",
                    "        if(referencia!==null)",
                    "        {if(referencia.display)",
                    "             {           var layout = referencia.display.getLayout();",
                    "        layout.setActiveItem(this.lookupReference(view));",
                    "              }",
                    "        }"
                ]
            },
            "name": "showView",
            "designerId": "9875454b-376c-479b-ab5c-8a5617960650"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#gridPanel",
                "designer|params": [
                    "rowmodel, record, index, eOpts"
                ],
                "designer|targetType": "MyGridPanel6",
                "fn": "select",
                "implHandler": [
                    "// Set selected record",
                    "this.getViewModel().set('record', record);",
                    "",
                    "",
                    "var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "botones.forEach(function (item) {",
                    "    item.setDisabled(false);",
                    "});",
                    "// Show details",
                    "this.showView('details');"
                ],
                "name": "select",
                "scope": "me"
            },
            "name": "select",
            "designerId": "e9a9d2ab-4162-40e1-9828-97754bcef9a2"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#gridPanel",
                "designer|params": [
                    "model",
                    "selected",
                    "eOpts"
                ],
                "designer|targetType": "MyGridPanel6",
                "fn": "onGridpanelSelectionChange",
                "implHandler": [
                    "var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "if(selected.length>1)",
                    " {this.getViewModel().set('record', selected[selected.length-1]);",
                    "",
                    "botones.forEach(function (item) {",
                    "item.setDisabled(true);",
                    "});",
                    " }",
                    "else botones.forEach(function (item) {",
                    "item.setDisabled(false);",
                    "});",
                    "var botonesRemove =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    " if(selected.length>0)",
                    " {",
                    "botonesRemove.forEach(function (item) {",
                    "item.setDisabled(false);",
                    "});",
                    "      var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "",
                    "      if(selected.length>0)",
                    " {btnAssociate.forEach(function (item) {",
                    "                               item.setDisabled(false);",
                    "                           });",
                    " }",
                    "}",
                    "",
                    ""
                ],
                "name": "selectionchange",
                "scope": "me"
            },
            "name": "onGridpanelSelectionChange",
            "designerId": "bb178daf-1ccd-4b72-bbfd-dbd019487884"
        },
        {
            "type": "controlleraction",
            "reference": {
                "name": "listeners",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|controlQuery": "#cancelButton",
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "designer|targetType": "MyButton63",
                "fn": "cancelEdit",
                "implHandler": [
                    "// Show details",
                    "    var windows = button.up('window');",
                    "        if(windows)",
                    "        windows.close();",
                    "        else this.showView('details');",
                    "   if(button.up('panel'))",
                    "         {if(button.up('panel').up('panel').up('panel').down('gridpanel'))",
                    "                    {var boton = button.up('panel').up('panel').up('panel').down('gridpanel').down('button');",
                    "                this.refresh(boton);}",
                    "          if(button.up('panel').up('panel').up('panel').down('treepanel'))",
                    "                    {var boton = button.up('panel').up('panel').up('panel').down('treepanel').down('button');",
                    "                this.refresh(boton);}",
                    "                }",
                    ""
                ],
                "name": "click",
                "scope": "me"
            },
            "name": "cancelEdit",
            "designerId": "19ec7fdc-b9e2-4b29-b0f7-a9acbdc84885"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "addWindows",
                "implHandler": [
                    "this.model='';",
                    "this.win='';",
                    "var me = this;",
                    "var aux = this.view.xtype;",
                    "this.getWinPanel(aux);",
                    "win = this.win;",
                    "model = this.model;",
                    "",
                    "",
                    "var vista = Ext.create('widget.'+win);",
                    "vista.title = 'Adicionar '+vista.title;",
                    " form = vista.down('form').getForm();",
                    "",
                    "",
                    "        var newRecord = Ext.create(model);",
                    "var record = this.getViewModel().get('record');",
                    "",
                    "if(newRecord.data.parent_id!==undefined)",
                    " {if(record)",
                    "{//newRecord.data.parent = record.data.nombre;",
                    "newRecord.data.parent_id = record.data.id;",
                    "",
                    "}else {",
                    "    newRecord.data.parent_id = '';",
                    "",
                    "}}",
                    "",
                    "        // Clear form",
                    "        form.reset();",
                    "",
                    "        // Set record",
                    "        form.loadRecord(newRecord);",
                    "form.owner.items.items.forEach(function (item) {",
                    "if(!item.config.disabled)",
                    "                if(item.xtype=='treepanel')",
                    "                {",
                    "                    if(record!==null)",
                    "                    item.store.proxy.extraParams.id_asociado =record.data.id;",
                    "                    else",
                    "                        item.store.proxy.extraParams.id_asociado ='';",
                    "                    item.store.proxy.extraParams.parent_id ='';",
                    "                    item.store.proxy.extraParams.detalles ='';",
                    "",
                    "item.store.load();",
                    "                }",
                    "    if(item.xtype=='tabpanel')",
                    "        {  var result = [];",
                    "            result = me.searchComponent('combobox',item,result);",
                    "         for(var comp in result)",
                    "                    {var obj = result[comp];",
                    "",
                    "                     if(!obj.config.disabled)",
                    "                        if(obj.xtype=='combobox')",
                    "                        {if(obj.store.proxy.extraParams)",
                    "                                   { obj.store.proxy.extraParams.combo ='combo';",
                    "                                    obj.store.load({   scope: this,",
                    "                            callback: function (records, operation, success) {",
                    "if(obj.store)",
                    "                                obj.store.proxy.extraParams.combo ='';",
                    "                            }});",
                    "                                   }}",
                    "                    }",
                    "         var resultree = [];",
                    "            resultree = me.searchComponent('treepanel',item,resultree);",
                    "         for(var comptree in resultree)",
                    "                    {var objtree = resultree[comptree];",
                    " if(!objtree.config.disabled)",
                    "                         if(objtree.xtype=='treepanel')",
                    "                {    if(record!==null)",
                    "                    objtree.store.proxy.extraParams.id_asociado =record.data.id;",
                    "                    else",
                    "                        objtree.store.proxy.extraParams.id_asociado ='';",
                    "                    objtree.store.proxy.extraParams.parent_id ='';",
                    "                    objtree.store.proxy.extraParams.detalles ='';",
                    "",
                    "objtree.store.load();",
                    "                }",
                    "                    }",
                    "        }",
                    "    if(!item.config.disabled)",
                    "            if(item.xtype=='combobox')",
                    "                {if(item.store.proxy.extraParams)",
                    "                           { item.store.proxy.extraParams.combo ='combo';",
                    "                            item.store.load({   scope: this,",
                    "                    callback: function (records, operation, success) {",
                    "",
                    "                        item.store.proxy.extraParams.combo ='';",
                    "                    }});",
                    "                           }}",
                    "",
                    "        });",
                    "vista.show();"
                ]
            },
            "name": "addWindows",
            "designerId": "5a9eb16a-d7a9-456d-8129-5bbc406fa707"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "editWindows",
                "implHandler": [
                    "this.model='';",
                    "this.win='';",
                    "var me = this;",
                    "var aux = this.view.xtype;",
                    "this.getWinPanel(aux);",
                    "win = this.win;",
                    "model = this.model;",
                    "",
                    "",
                    "",
                    "var vista = Ext.create('widget.'+win);",
                    "vista.title = 'Editar '+vista.title;",
                    "form = vista.down('form').getForm();",
                    "",
                    "",
                    "var record = this.getViewModel().get('record');",
                    "",
                    "// Load record model into form",
                    "",
                    "form.owner.items.items.forEach(function (item) {",
                    "",
                    "    if(item.xtype=='treepanel')",
                    "    {  // console.log(record)",
                    "        if(record!==null)",
                    "        item.store.proxy.extraParams.id_asociado =record.data.id;",
                    "     else",
                    "         item.store.proxy.extraParams.id_asociado ='';",
                    "     item.store.proxy.extraParams.parent_id ='';",
                    "     item.store.proxy.extraParams.detalles ='edit';",
                    "",
                    "     item.store.load();",
                    "    }",
                    "    if(item.xtype=='tabpanel')",
                    "    {  var result = [];",
                    "     result = me.searchComponent('combobox',item,result);",
                    "     for(var comp in result)",
                    "     {var obj = result[comp];",
                    "              if(obj.xtype=='combobox')",
                    "              {",
                    "                       if(obj.config.inputAttrTpl)",
                    "                                 {  var form =obj.up('form');",
                    "                                   var acciones = obj.config.inputAttrTpl[0].split(',');",
                    "       // console.log(obj.config.inputAttrTpl)",
                    "                                        for(var accion in acciones)",
                    "                                        {",
                    "",
                    "                                            var campo = acciones[accion].split(':');",
                    "",
                    "                                            var itemt = form.down('treepanel[title='+campo[0]+']');",
                    "",
                    "",
                    "                                if(itemt!==null)",
                    "                                      {      if(campo[1]==='false')",
                    "                                                {",
                    "                                                    if(record!==null)",
                    "                                {var filter = [];",
                    "",
                    "                                        filter.campo_id = record.data[obj.name].toString();",
                    "                                     //  console.log(record.data[obj.name])",
                    "                                        itemt.store.proxy.extraParams.combo='combo';",
                    "                                        filter.push({value:filter.campo_id,name_id:obj.name});",
                    "                                        itemt.store.proxy.extraParams.filter=Ext.JSON.encode(filter);",
                    "",
                    "",
                    "                                }",
                    "                                                }",
                    "                                                else {",
                    "                                                    itemt.setDisabled(true);",
                    "                                                }",
                    "                                        }",
                    "                                        }",
                    "                               }",
                    "",
                    "                  if(record.data[obj.name]!=='')",
                    "                  obj.setDisabled(false);",
                    "                  if(obj.store.proxy.extraParams)",
                    "              { obj.store.proxy.extraParams.combo ='combo';",
                    "               obj.store.load({   scope: this,",
                    "                               callback: function (records, operation, success) {",
                    "",
                    "                                   obj.store.proxy.extraParams.combo ='';",
                    "",
                    "                               }});",
                    "              }}",
                    "             }",
                    "",
                    "     var resultree = [];",
                    "            resultree = me.searchComponent('treepanel',item,resultree);",
                    "         for(var comptree in resultree)",
                    "                    {var objtree = resultree[comptree];",
                    "                         if(objtree.xtype=='treepanel')",
                    "                {   // console.log(record)",
                    "                    if(record!==null)",
                    "                {objtree.setDisabled(false);",
                    "                    objtree.store.proxy.extraParams.id_asociado =record.data.id;",
                    "                }   else",
                    "                        objtree.store.proxy.extraParams.id_asociado ='';",
                    "                    objtree.store.proxy.extraParams.parent_id ='';",
                    "                    objtree.store.proxy.extraParams.detalles ='edit';",
                    "",
                    "//objtree.store.load();",
                    "                  objtree.store.load({   scope: this,",
                    "                                            callback: function (records, operation, success) {",
                    "                                                item.setDisabled(false);",
                    "                                                if(item.clearFilters)",
                    "                                                 item.clearFilters();",
                    "                                                item.store.proxy.extraParams.combo = '';",
                    "                                                item.store.proxy.extraParams.filter ='';",
                    "                                            }});",
                    "                }",
                    "                    }",
                    "",
                    "",
                    "    }",
                    "    if(item.xtype=='combobox')",
                    "    {if(record.data[item.name]!=='')",
                    "        item.setDisabled(false);",
                    "     if(item.store.proxy.extraParams)",
                    "     { item.store.proxy.extraParams.combo ='combo';",
                    "      item.store.load({   scope: this,",
                    "                       callback: function (records, operation, success) {",
                    "",
                    "                           item.store.proxy.extraParams.combo ='';",
                    "                       }});",
                    "     }}",
                    "",
                    "});",
                    "// Show form",
                    "form.loadRecord(record);",
                    "vista.show();"
                ]
            },
            "name": "editWindows",
            "designerId": "79f0f12b-55f3-4f48-bb13-bdd64e126613"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "target"
                ],
                "fn": "edit",
                "implHandler": [
                    "var formPanel = this.getReferences().form,",
                    "    form = formPanel.getForm(),",
                    "    record = this.getViewModel().get('record');",
                    "",
                    "// Load record model into form",
                    "form.loadRecord(record);",
                    "",
                    "var auxTitle = this.view.title;",
                    "var countWord = this.view.title.split(' ');",
                    "var title = '';",
                    "for (i=0;i<countWord.length;i++)",
                    "{",
                    "    for(j=0;j<countWord[i].length-1;j++)",
                    "    {  if(j+1<countWord[i].length)",
                    "        word = countWord[i][j] + countWord[i][j+1];",
                    "     if(word=='es')",
                    "     {",
                    "         var lastword = countWord[i][j-1];",
                    "         if(lastword=='t')",
                    "             title+='e';",
                    "         break;",
                    "     }",
                    "     title += countWord[i][j];",
                    "     if(countWord[i][j+1]!='s' && j+1==countWord[i].length-1)",
                    "         title += countWord[i][j+1];",
                    "",
                    "    }",
                    "    if(i+1<countWord.length)",
                    "        title+=' ';",
                    "}",
                    "",
                    "",
                    "// Set title",
                    "formPanel.setTitle('Editar '+title);",
                    "form.owner.items.items.forEach(function (item) {",
                    "",
                    "    if(item.xtype=='treepanel')",
                    "    {",
                    "        item.store.proxy.extraParams.id_asociado =record.data.id;",
                    "        item.store.proxy.extraParams.parent_id ='';",
                    "        item.store.proxy.extraParams.detalles ='edit';",
                    "",
                    "        item.store.load();",
                    "    }",
                    "    if(item.xtype=='tabpanel')",
                    "        {  var result = [];",
                    "            result = me.searchComponent('combobox',item,result);",
                    "         for(var comp in result)",
                    "                    {var obj = result[comp];",
                    "                        if(obj.xtype=='combobox')",
                    "                        {if(obj.store.proxy.extraParams)",
                    "                                   { obj.store.proxy.extraParams.combo ='combo';",
                    "                                    obj.store.load({   scope: this,",
                    "                            callback: function (records, operation, success) {",
                    "",
                    "                                obj.store.proxy.extraParams.combo ='';",
                    "                            }});",
                    "                                   }}",
                    "                    }",
                    "        }",
                    "    if(item.xtype=='combobox')",
                    "    {item.store.proxy.extraParams.combo ='combo';",
                    "     item.store.load({   scope: this,",
                    "                      callback: function (records, operation, success) {",
                    "",
                    "                          item.store.proxy.extraParams.combo ='';",
                    "                      }});}",
                    "});",
                    "// Show form",
                    "this.showView('form');"
                ]
            },
            "name": "edit",
            "designerId": "26bb164d-b4da-495d-af8c-2453bf9e3675"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "add",
                "implHandler": [
                    "if((typeof eOpts)!=='undefined')",
                    "{",
                    "    this.model='';",
                    "    this.win='';",
                    "    var me = this;",
                    "    var aux = this.view.xtype;",
                    "    this.getWinPanel(aux);",
                    "    win = this.win;",
                    "    model = this.model;",
                    "",
                    "    var formPanel = this.getReferences().form,",
                    "        form = formPanel.getForm(),",
                    "        newRecord = Ext.create(model);",
                    "    // Clear form",
                    "    form.reset();",
                    "",
                    "    // Set record",
                    "    //console.log(record)",
                    "    var record = this.getViewModel().get('record');",
                    "",
                    "",
                    "    form.loadRecord(newRecord);",
                    "    if(record)",
                    "    {   if(record.data.root===false)",
                    "    {//newRecord.data.parent = record.data.nombre;",
                    "        newRecord.data.parent_id = record.data.id;",
                    "",
                    "    }",
                    "    }",
                    "    //else {",
                    "    // if(newRecord.data.root===false)",
                    "    //newRecord.data.parent_id = 'root';",
                    "",
                    "    //}",
                    "",
                    "    var auxTitle = this.view.title;",
                    "    var countWord = this.view.title.split(' ');",
                    "    var title = '';",
                    "    for (i=0;i<countWord.length;i++)",
                    "    {",
                    "        for(j=0;j<countWord[i].length-1;j++)",
                    "        {  if(j+1<countWord[i].length)",
                    "            word = countWord[i][j] + countWord[i][j+1];",
                    "",
                    "         if(word=='es')",
                    "         {",
                    "             var lastword = countWord[i][j-1];",
                    "             if(lastword=='t')",
                    "                 title+='e';",
                    "             break;",
                    "         }",
                    "         title += countWord[i][j];",
                    "         if(countWord[i][j+1]!='s' && j+1==countWord[i].length-1)",
                    "             title += countWord[i][j+1];",
                    "",
                    "        }",
                    "        if(i+1<countWord.length)",
                    "            title+=' ';",
                    "    }",
                    "",
                    "    // Set title",
                    "    formPanel.setTitle('Adicionar '+title);",
                    "",
                    "    form.owner.items.items.forEach(function (item) {",
                    "",
                    "        if(item.xtype=='treepanel')",
                    "        {    if(record!==null)",
                    "            item.store.proxy.extraParams.id_asociado =record.data.id;",
                    "         else",
                    "             item.store.proxy.extraParams.id_asociado ='';",
                    "         item.store.proxy.extraParams.parent_id ='';",
                    "         item.store.proxy.extraParams.detalles ='';",
                    "",
                    "         item.store.load();",
                    "        }",
                    "        if(item.xtype=='tabpanel')",
                    "        {  var result = [];",
                    "         result = me.searchComponent('combobox',item,result);",
                    "         for(var comp in result)",
                    "         {var obj = result[comp];",
                    "          if(obj.xtype=='combobox')",
                    "          {if(obj.store.proxy.extraParams)",
                    "          { obj.store.proxy.extraParams.combo ='combo';",
                    "           obj.store.load({   scope: this,",
                    "                           callback: function (records, operation, success) {",
                    "",
                    "                               obj.store.proxy.extraParams.combo ='';",
                    "                           }});",
                    "          }}",
                    "         }",
                    "        }",
                    "        if(item.xtype=='combobox')",
                    "        {if(item.store.proxy.extraParams)",
                    "        { item.store.proxy.extraParams.combo ='combo';",
                    "         item.store.load({   scope: this,",
                    "                          callback: function (records, operation, success) {",
                    "",
                    "                              item.store.proxy.extraParams.combo ='';",
                    "                          }});",
                    "        }}",
                    "",
                    "    });",
                    "    // Show form",
                    "    this.showView('form');",
                    "",
                    "    // Deselect grid",
                    "    var grid =  Ext.ComponentQuery.query('panel #gridpanel');",
                    "",
                    "    grid.forEach(function (item) {",
                    "",
                    "        item.getSelectionModel().deselectAll();",
                    "    });",
                    "    var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    "    botones.forEach(function (item) {",
                    "        item.setDisabled(true);",
                    "    });",
                    "    var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "    botones.forEach(function (item) {",
                    "        item.setDisabled(true);",
                    "    });",
                    "    var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "    btnAssociate.forEach(function (item) {",
                    "        item.setDisabled(true);",
                    "    });",
                    "",
                    "    var tree =  Ext.ComponentQuery.query('panel #treepanel');",
                    "",
                    "    tree.forEach(function (item) {",
                    "",
                    "        item.getSelectionModel().deselectAll();",
                    "    });",
                    "",
                    "}"
                ]
            },
            "name": "add",
            "designerId": "5c710bda-287f-468e-9d07-60ea6fe79f96"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "remove",
                "implHandler": [
                    "if((typeof eOpts)!=='undefined')",
                    "{",
                    "",
                    "",
                    "    var me = this;",
                    "    var nombre='';",
                    "    var isTree=false;",
                    "    var sm;",
                    "    var aux = this.view.items.items.forEach(function (item) {",
                    "        if(item.componentCls == 'x-panel')",
                    "            if(item.store)",
                    "                nombre = item.store.storeId;",
                    "    });",
                    "    var grid =  Ext.ComponentQuery.query('panel #gridPanel');",
                    "    grid.forEach(function (item) {",
                    "        if(item.store)",
                    "            if(nombre==item.store.storeId)",
                    "                sm = item.getSelectionModel().selected;",
                    "",
                    "    });",
                    "    var tree =  Ext.ComponentQuery.query('panel #treePanel');",
                    "    tree.forEach(function (item) {",
                    "        if(item.store)",
                    "            if(nombre==item.store.storeId)",
                    "            {sm = item.getSelectionModel().selected;",
                    "             isTree = true;}",
                    "",
                    "    });",
                    "",
                    "",
                    "    var mensajeText = 'Esta seguro que desea eliminar los elementos seleccionados?';",
                    "",
                    "    if(sm.length==1)",
                    "        var mensajeText = 'Esta seguro que desea eliminar el elemento seleccionado?';",
                    "    // Ask user to confirm this action",
                    "    Ext.Msg.confirm('Confirmación de Eliminar', mensajeText, function(result) {",
                    "",
                    "        // User confirmed yes",
                    "        if (result == 'yes') {",
                    "",
                    "            var record = me.getViewModel().get('record'),",
                    "                store = Ext.StoreManager.lookup(nombre);",
                    "            // Delete record from store",
                    "",
                    "",
                    "",
                    "            // Deselect grid",
                    "",
                    "            var deleteItem = [];",
                    "            sm.each(function (item) {",
                    "",
                    "                deleteItem.push(item);",
                    "                if(isTree)",
                    "                item.remove();",
                    "            });",
                    "",
                    "            var erased = function(store1, operation, eOpts ) {",
                    "",
                    "",
                    "                var json = Ext.JSON.decode(operation._response.responseText);",
                    "",
                    "                if (json.success)",
                    "                {",
                    "",
                    "",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Información',",
                    "                        msg: json.message,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        //animateTarget: 'mb9',",
                    "                        //fn: showResult,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "",
                    "                }",
                    "                else{",
                    "",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Error',",
                    "                        msg: json.message,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        //animateTarget: 'mb9',",
                    "                        //fn: showResult,",
                    "                        icon: Ext.MessageBox.ERROR",
                    "                    });",
                    "",
                    "                }",
                    "                flag = false;",
                    "                button.setDisabled(true);",
                    "                var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "                botones.forEach(function (item) {",
                    "                    item.setDisabled(true);",
                    "                });",
                    "                 var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "                           btnAssociate.forEach(function (item) {",
                    "                               item.setDisabled(true);",
                    "                           });",
                    "",
                    "            };",
                    "",
                    "",
                    "                itemDe = store.remove(deleteItem);",
                    "",
                    "                if ( deleteItem.length ==1)",
                    "                {",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Información',",
                    "                        msg: 'El elemento ha sido eliminado satisfactoriamente',",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        //animateTarget: 'mb9',",
                    "                        //fn: showResult,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "",
                    "",
                    "                }",
                    "                else if(deleteItem.length >1){",
                    "",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Información',",
                    "                        msg: 'Los elementos han sido eliminados satisfactoriamente',",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        animateTarget: 'mb9',",
                    "                        //fn: showResult,",
                    "                        icon: Ext.MessageBox.INFO",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "                else {",
                    "                    var menssage = 'Los elementos no se han eliminado';",
                    "                    if(deleteItem.length ==1)",
                    "                        menssage = 'El elemento no se ha eliminado';",
                    "                    Ext.MessageBox.show({",
                    "                        title: 'Error',",
                    "                        msg: menssage,",
                    "                        buttons: Ext.MessageBox.OK,",
                    "                        animateTarget: 'mb9',",
                    "                        //fn: showResult,",
                    "                        icon: Ext.MessageBox.ERROR",
                    "                    });",
                    "",
                    "                }",
                    "",
                    "                var flag = true;",
                    "",
                    "",
                    "                // Hide display",
                    "                me.showView('selectMessage');",
                    "                //Disabled Button",
                    "",
                    "                button.setDisabled(true);",
                    "                var botonesEdit = Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "                botonesEdit.forEach(function (item) {",
                    "                    item.setDisabled(true);",
                    "                });",
                    "             var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "                           btnAssociate.forEach(function (item) {",
                    "                               item.setDisabled(true);",
                    "                           });",
                    "           // }",
                    "",
                    "        }",
                    "",
                    "",
                    "    });",
                    "}"
                ]
            },
            "name": "remove",
            "designerId": "d98ad9f9-6e16-478d-b31e-05c3baa70e1e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "save",
                "implHandler": [
                    "if((typeof eOpts)!=='undefined')",
                    "{var nombre='';",
                    "",
                    "",
                    " var aux = this.view.items.items.forEach(function (item) {",
                    "     if(item.componentCls == 'x-panel')",
                    "         if(item.store)",
                    "             nombre = item.store.storeId;",
                    " });",
                    "",
                    "  var windows = button.up('window');",
                    " var form;",
                    " if(windows)",
                    "     form = windows.down('form').getForm();",
                    " else",
                    "     form = this.getReferences().form.getForm();",
                    " var record = form.getRecord(),",
                    " store = Ext.StoreManager.lookup(nombre);",
                    " var me = this;",
                    "",
                    "",
                    " // Valid",
                    " if (form.isValid()) {",
                    "",
                    "     // Update associated record with values",
                    "",
                    "     var nombre='';",
                    "",
                    "     form.owner.items.items.forEach(function (item) {",
                    "         if(item.name){",
                    "         if(item.name == 'nombre')",
                    "             nombre = item.value;",
                    "         var aux = item.name.replace('_id','');",
                    "",
                    "         if(aux!=item.name)",
                    "",
                    "             delete(record.data[aux]); //=item.rawValue;",
                    "         }});",
                    "",
                    "     // Add to store if new record",
                    "if(nombre!=='')",
                    "     var dt = store.findRecord('nombre',nombre);",
                    "store.proxy.extraParams.parent_id='save';",
                    "     if (record.phantom) {",
                    "",
                    "",
                    "",
                    "         if(dt===null)",
                    "         {form.updateRecord();",
                    "          store.add(record);",
                    "          store.commitChanges();",
                    "",
                    "         }",
                    "         else",
                    "             if(nombre!=='' &&nombre ==dt.data.nombre)",
                    "                 Ext.MessageBox.show({",
                    "                     title: 'Error',",
                    "                     msg: 'El elemento ya existe.',",
                    "                     buttons: Ext.MessageBox.OK,",
                    "                     //animateTarget: 'mb9',",
                    "                     //fn: showResult,",
                    "                     icon: Ext.MessageBox.ERROR",
                    "                 });",
                    "         else{",
                    "             form.updateRecord();",
                    "             store.add(record);",
                    "             store.commitChanges();",
                    "         }",
                    "     }else{",
                    "",
                    "         if(dt===null)",
                    "         {form.updateRecord();",
                    "          store.commitChanges();",
                    "",
                    "         }else",
                    "             if(nombre!=='' &&nombre ==dt.data.nombre)",
                    "                 Ext.MessageBox.show({",
                    "                     title: 'Error',",
                    "                     msg: 'El elemento ya existe.',",
                    "                     buttons: Ext.MessageBox.OK,",
                    "                     //animateTarget: 'mb9',",
                    "                     //fn: showResult,",
                    "                     icon: Ext.MessageBox.ERROR",
                    "                 });",
                    "         else{",
                    "             form.updateRecord();",
                    "             store.commitChanges();",
                    "         }",
                    "",
                    "",
                    "     }",
                    "",
                    "     // Commit changes",
                    "",
                    "     var flag=true;",
                    "     store.on('write',fn = function(store, operation, eOpts ) {",
                    "",
                    "",
                    "         if(flag)",
                    "         {var json = Ext.JSON.decode(operation._response.responseText);",
                    "",
                    "          if (json.id !== null)",
                    "          { this.load({",
                    "              callback: function(s,o,e){",
                    "                  flag = false;",
                    "                  me.showView('selectMessage');",
                    "                  var grid =  Ext.ComponentQuery.query('panel gridpanel');",
                    "",
                    "                  grid.forEach(function (item) {",
                    "",
                    "                      item.getSelectionModel().deselectAll();",
                    "                  });",
                    "",
                    "                  var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    "                  botones.forEach(function (item) {",
                    "                      item.setDisabled(true);",
                    "                  });",
                    "                  var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "                  botonesEditar.forEach(function (item) {",
                    "                      item.setDisabled(true);",
                    "                  });",
                    "                   var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "                           btnAssociate.forEach(function (item) {",
                    "                               item.setDisabled(true);",
                    "                           });",
                    "              }",
                    "          });",
                    "           Ext.MessageBox.show({",
                    "               title: 'Información',",
                    "               msg: json.message,",
                    "               buttons: Ext.MessageBox.OK,",
                    "               //animateTarget: 'mb9',",
                    "               //fn: showResult,",
                    "               icon: Ext.MessageBox.INFO",
                    "           });",
                    "",
                    "          }",
                    "          else{",
                    "",
                    "              Ext.MessageBox.show({",
                    "                  title: 'Error',",
                    "                  msg: json.message,",
                    "                  buttons: Ext.MessageBox.OK,",
                    "                  //animateTarget: 'mb9',",
                    "                  //fn: showResult,",
                    "                  icon: Ext.MessageBox.ERROR",
                    "              });",
                    "",
                    "          }}",
                    "",
                    "     });",
                    "     // Display record",
                    " }",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "save",
            "designerId": "5ebff0b2-48ce-495a-9739-98322f2d68eb"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button",
                    "e",
                    "eOpts"
                ],
                "fn": "saveTreeWindows",
                "implHandler": [
                    "if((typeof eOpts)!=='undefined')",
                    "{var nombreStore='';",
                    " var store='';",
                    "",
                    " var aux = this.view.items.items.forEach(function (item) {",
                    "     if(item.componentCls == 'x-panel')",
                    "         if(item.store){",
                    "             nombreStore = item.store.storeId;",
                    "             store =item.store;",
                    "         }",
                    " });",
                    "",
                    " var windows = button.up('window');",
                    " var form;",
                    " if(windows)",
                    "     form = windows.down('form').getForm();",
                    " else",
                    "     form = this.getReferences().form.getForm();",
                    "",
                    "",
                    " var record = form.getRecord();",
                    "",
                    "",
                    " var me = this;",
                    "",
                    "",
                    " // Valid",
                    " if (form.isValid()) {",
                    "",
                    "     // Update associated record with values",
                    "",
                    "     var nombre='';",
                    "     var asociados = [];",
                    "     form.owner.items.items.forEach(function (item) {",
                    "",
                    "         if(item.xtype=='treepanel')",
                    "         {",
                    "",
                    "             var checkeds =item.getChecked();",
                    "             checkeds.forEach(function (v) {",
                    "",
                    "                 asociados.push({id: v.data.id,model: v.data.model});",
                    "             });",
                    "",
                    "",
                    "",
                    "         }",
                    "         if(item.xtype=='tabpanel')",
                    "         {  var result = [];",
                    "          result = me.searchComponent('combobox',item,result);",
                    "          for(var comp in result)",
                    "          {var obj = result[comp];",
                    "           if(obj.xtype=='combobox')",
                    "           {",
                    "               var aux1 = obj.name.replace('_id','');",
                    "",
                    "               if(aux1!=obj.name)",
                    "",
                    "                   delete(record.data[aux1]);//=obj.rawValue;",
                    "",
                    "",
                    "",
                    "",
                    "           }",
                    "          }",
                    "",
                    "          var resultree = [];",
                    "          resultree = me.searchComponent('treepanel',item,resultree);",
                    "          for(var comptree in resultree)",
                    "          {var objtree = resultree[comptree];",
                    "           if(objtree.xtype=='treepanel')",
                    "           {",
                    "",
                    "               var checkedstree =objtree.getChecked();",
                    "               checkedstree.forEach(function (v) {",
                    "",
                    "                   asociados.push({id: v.data.id,model: v.data.model});",
                    "               });",
                    "",
                    "",
                    "",
                    "           }",
                    "          }",
                    "         }",
                    "         if(item.name){",
                    "             if(item.name === 'nombre')",
                    "                 nombre = item.value;",
                    "             var aux = item.name.replace('_id','');",
                    "",
                    "",
                    "             if(aux!=item.name)",
                    "             {var name_comp = item.name;",
                    "              delete(record.data[aux]); //= item.rawValue;",
                    "              if(item.selection)",
                    "                  record.data[name_comp]=item.selection.id;",
                    "",
                    "",
                    "             }",
                    "             if(record.data.parent_id)",
                    "                 record.data.leaf = true;",
                    "             //if(record.data.parent_id=='root')",
                    "",
                    "         }});",
                    "",
                    "     // Add to store if new record",
                    "     if(asociados.length>0)",
                    "         record.data.asociados=asociados;//Ext.JSON.encode(asociados);",
                    "",
                    "     //record.data.children=false;",
                    "     //record.data.text = nombre;",
                    "     nombreStore = record.entityName.replace('cerodatax.model.','');",
                    "     store = Ext.StoreManager.lookup(nombreStore);",
                    "",
                    "     store.proxy.extraParams.parent_id='save';",
                    "//verificar prk debe de realizar store y quedarse donde mismo estaba en el caso de q filtree y asocie al mismo tiempo",
                    "store.clearFilter();",
                    "     var flag=false;",
                    "     var write = function(store1, operation, eOpts ) {",
                    "",
                    "",
                    "",
                    "",
                    "         if(flag)",
                    "         {var json = Ext.JSON.decode(operation._response.responseText);",
                    "",
                    "          if (json.id !== null &&flag)",
                    "          {flag = false;",
                    "",
                    "",
                    "",
                    "           store.proxy.extraParams.parent_id='root';",
                    "           store.load({",
                    "               callback: function(s,o,e){",
                    "",
                    "                   if(windows)",
                    "                       windows.close();",
                    "                   else",
                    "                       me.showView('selectMessage');",
                    "                   var tree =  Ext.ComponentQuery.query('panel treepanel');",
                    "",
                    "                   tree.forEach(function (item) {",
                    "",
                    "                       item.getSelectionModel().deselectAll();",
                    "                   });",
                    "                   var grid =  Ext.ComponentQuery.query('panel gridpanel');",
                    "",
                    "                   grid.forEach(function (item) {",
                    "",
                    "                       item.getSelectionModel().deselectAll();",
                    "                   });",
                    "var botonesEditar =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "                   botonesEditar.forEach(function (item) {",
                    "                       item.setDisabled(true);",
                    "                   });",
                    "                   var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    "                   botones.forEach(function (item) {",
                    "                       item.setDisabled(true);",
                    "                   });",
                    "                   var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "                   btnAssociate.forEach(function (item) {",
                    "                       item.setDisabled(true);",
                    "                   });",
                    "",
                    "               }",
                    "           });",
                    "           Ext.MessageBox.show({",
                    "               title: 'Información',",
                    "               msg: json.message,",
                    "               buttons: Ext.MessageBox.OK,",
                    "               //animateTarget: 'mb9',",
                    "               //fn: showResult,",
                    "               icon: Ext.MessageBox.INFO",
                    "           });",
                    "",
                    "          }",
                    "         }",
                    "",
                    "     };",
                    "",
                    "     var dt = store.findRecord('nombre',nombre);",
                    "",
                    "     if (record.phantom) {",
                    "",
                    "",
                    "",
                    "         if(dt===null)",
                    "         {",
                    "             form.updateRecord();",
                    "",
                    "             record.save({success:write});",
                    "",
                    "             flag= true;",
                    "         }",
                    "         else",
                    "             if(nombre!=='' &&nombre ===dt.data.nombre)",
                    "             { Ext.MessageBox.show({",
                    "                 title: 'Error',",
                    "                 msg: 'El elemento ya existe.',",
                    "                 buttons: Ext.MessageBox.OK,",
                    "                 //animateTarget: 'mb9',",
                    "                 //fn: showResult,",
                    "                 icon: Ext.MessageBox.ERROR",
                    "             });  }",
                    "         else{",
                    "",
                    "             form.updateRecord();",
                    "             record.save({success:write});",
                    "             flag= true;",
                    "",
                    "         }",
                    "",
                    "     }else{",
                    "         if(dt===null)",
                    "         {form.updateRecord();",
                    "",
                    "          record.save({success:write});",
                    "          flag= true;",
                    "",
                    "         }else",
                    "             if(nombre!=='' &&nombre ===dt.data.nombre&&dt.data.id!==record.data.id)",
                    "             {",
                    "                 Ext.MessageBox.show({",
                    "                     title: 'Error',",
                    "                     msg: 'El elemento ya existe.',",
                    "                     buttons: Ext.MessageBox.OK,",
                    "                     //animateTarget: 'mb9',",
                    "                     //fn: showResult,",
                    "                     icon: Ext.MessageBox.ERROR",
                    "                 }); }",
                    "         else{",
                    "             form.updateRecord();",
                    "",
                    "             record.save({success:write});",
                    "             flag= true;",
                    "",
                    "         }",
                    "",
                    "",
                    "     }",
                    "",
                    " }",
                    "",
                    "",
                    "}"
                ]
            },
            "name": "saveTreeWindows",
            "designerId": "04e0ec52-32f9-4e95-8e4d-6bcbd67048c6"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "model, selected, eOpts"
                ],
                "fn": "onTreePanelSelectionChange",
                "implHandler": [
                    "              var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "               var botonesRemove =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    "var btnAssociate =  Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "",
                    "",
                    "                if(selected.length===0 )",
                    "                 {this.getViewModel().set('record', selected[selected.length-1]);",
                    "",
                    "                botones.forEach(function (item) {",
                    "                item.setDisabled(true);",
                    "                });",
                    "                    botonesRemove.forEach(function (item) {",
                    "                item.setDisabled(true);",
                    "                });",
                    "                     btnAssociate.forEach(function (item) {",
                    "                item.setDisabled(true);",
                    "                });",
                    "                 }",
                    "                else{",
                    "                    if(selected.length>1)",
                    "",
                    "                botones.forEach(function (item) {",
                    "                item.setDisabled(true);",
                    "                });",
                    "                else",
                    "                    botones.forEach(function (item) {",
                    "                item.setDisabled(false);",
                    "                });",
                    "        botonesRemove.forEach(function (item) {",
                    "                item.setDisabled(false);",
                    "        });",
                    "                btnAssociate.forEach(function (item) {",
                    "                item.setDisabled(false);",
                    "        });",
                    "                }",
                    "",
                    ""
                ]
            },
            "name": "onTreePanelSelectionChange",
            "designerId": "df971b2f-92a3-4b25-94c1-de0b0dbd0f9d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "nodeinterface",
                    "eOpts"
                ],
                "fn": "onTreePanelBeforeItemExpand",
                "implHandler": [
                    "",
                    " ",
                    "   var store= nodeinterface.getTreeStore();",
                    "    store.proxy.extraParams.parent_id = nodeinterface.data.id;",
                    ""
                ]
            },
            "name": "onTreePanelBeforeItemExpand",
            "designerId": "b0d52f65-d2f3-4aeb-ab21-eb7a37fb6434"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "nodeinterface",
                    "eOpts"
                ],
                "fn": "onTreePanelBeforeItemExpand1",
                "implHandler": [
                    "",
                    "",
                    "   var store= nodeinterface.getTreeStore();",
                    "    store.proxy.extraParams.parent_id = nodeinterface.data.id;",
                    " var r = this.getViewModel().get('record');",
                    "//console.log(r)",
                    "if(r!==null)",
                    "{store.proxy.extraParams.id_asociado =r.data.id;",
                    "",
                    " //store.proxy.extraParams.detalles ='detalles';",
                    "}",
                    "else{",
                    "    store.proxy.extraParams.id_asociado ='';",
                    "",
                    "/// store.proxy.extraParams.detalles ='';",
                    "}"
                ]
            },
            "name": "onTreePanelBeforeItemExpand1",
            "designerId": "27a4eb78-0062-4095-81c9-d73fac5d7002"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "node",
                    "index",
                    "item",
                    "eOpts"
                ],
                "fn": "onTreePanelAfterItemExpand",
                "implHandler": [
                    "var r = this.getViewModel().get('record');",
                    "        ",
                    "        if(r!==null)",
                    "        {var store =  r.getTreeStore();",
                    "            store.proxy.extraParams.parent_id = '';}"
                ]
            },
            "name": "onTreePanelAfterItemExpand",
            "designerId": "5305cd79-7367-4b37-8262-04a402cfe1d3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "rowmodel",
                    "record",
                    "index",
                    "eOpts"
                ],
                "fn": "onTreePanelSelect",
                "implHandler": [
                    "// Set selected record",
                    "",
                    "  this.getViewModel().set('record', record);",
                    "          var ref = this.getReferences();",
                    "        if(ref!==null)",
                    "{var referencia = this.getReferences().display;",
                    " //console.log(referencia.down('treepanel'))",
                    " if(referencia.down('treepanel')!==null){",
                    "var store = referencia.down('treepanel').store;",
                    "store.proxy.extraParams.id_asociado = record.data.id;",
                    "store.proxy.extraParams.parent_id ='';",
                    "store.proxy.extraParams.detalles = 'detalles';",
                    "store.load();",
                    "     }",
                    "}",
                    "// Show detairecordls",
                    "this.showView('details');"
                ]
            },
            "name": "onTreePanelSelect",
            "designerId": "628be58e-8a95-45ce-8017-3c58a860dfec"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "bottom"
                ],
                "fn": "refresh",
                "implHandler": [
                    "var tree = bottom.up('treepanel');",
                    "var grid = bottom.up('gridpanel');",
                    "if(grid)",
                    "    {",
                    "       grid.store.clearFilter();",
                    "       grid.store.load();",
                    "    grid.getSelectionModel().deselectAll();",
                    "",
                    "    }",
                    "if(tree)",
                    "    {tree.store.proxy.extraParams.parent_id = '';",
                    "     tree.store.clearFilter();",
                    "     tree.store.load();",
                    "",
                    "    tree.getSelectionModel().deselectAll();",
                    "",
                    "    }",
                    "var botones =  Ext.ComponentQuery.query('panel toolbar #btnEdit');",
                    "botones.forEach(function (item) {",
                    "    item.setDisabled(true);",
                    "});",
                    "var botones =  Ext.ComponentQuery.query('panel toolbar #btnRemove');",
                    "botones.forEach(function (item) {",
                    "    item.setDisabled(true);",
                    "});",
                    " var btnAssociate = Ext.ComponentQuery.query('panel toolbar #btnAssociate');",
                    "                           btnAssociate.forEach(function (item) {",
                    "                               item.setDisabled(true);",
                    "                           });",
                    "this.showView('selectMessage');"
                ]
            },
            "name": "refresh",
            "designerId": "4898daf5-2ead-48c1-84bb-baa94dbf5b83"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "button, e, eOpts"
                ],
                "fn": "associate",
                "implHandler": [
                    "this.model='';",
                    "this.win='';",
                    "var me = this;",
                    "var aux = this.view.xtype;",
                    "",
                    "var asociar = button.baseParams;",
                    "this.getWinPanel(aux,asociar);",
                    "win = this.win;",
                    "model = this.model;",
                    "",
                    "",
                    "",
                    "var vista = Ext.create('widget.'+win);",
                    "vista.title = 'Asociar '+vista.title;",
                    "form = vista.down('form').getForm();",
                    "",
                    "",
                    "var record = this.getViewModel().get('record');",
                    "",
                    "",
                    "form.owner.items.items.forEach(function (item) {",
                    "",
                    "    if(item.xtype=='treepanel')",
                    "    {",
                    "        if(record!==null)",
                    "        item.store.proxy.extraParams.id_asociado =record.data.id;",
                    "     else",
                    "         item.store.proxy.extraParams.id_asociado ='';",
                    "     item.store.proxy.extraParams.parent_id ='';",
                    "     item.store.proxy.extraParams.detalles ='edit';",
                    "",
                    "     item.store.load();",
                    "    }",
                    "    if(item.xtype=='tabpanel')",
                    "    {  var result = [];",
                    "     result = me.searchComponent('combobox',item,result);",
                    "     for(var comp in result)",
                    "     {var obj = result[comp];",
                    "      if(obj.xtype=='combobox')",
                    "      {",
                    "          if(record.data[obj.name]!=='')",
                    "          obj.setDisabled(false);",
                    "          if(obj.store.proxy.extraParams)",
                    "      { obj.store.proxy.extraParams.combo ='combo';",
                    "       obj.store.load({   scope: this,",
                    "                       callback: function (records, operation, success) {",
                    "",
                    "                           obj.store.proxy.extraParams.combo ='';",
                    "                       }});",
                    "      }}",
                    "     }",
                    "",
                    "     var resultree = [];",
                    "            resultree = me.searchComponent('treepanel',item,resultree);",
                    "         for(var comptree in resultree)",
                    "                    {var objtree = resultree[comptree];",
                    "                         if(objtree.xtype=='treepanel')",
                    "                {    if(record!==null)",
                    "                    objtree.store.proxy.extraParams.id_asociado =record.data.id;",
                    "                    else",
                    "                        objtree.store.proxy.extraParams.id_asociado ='';",
                    "                    objtree.store.proxy.extraParams.parent_id ='';",
                    "                    objtree.store.proxy.extraParams.detalles ='edit';",
                    "",
                    "objtree.store.load();",
                    "                }",
                    "                    }",
                    "",
                    "",
                    "    }",
                    "    if(item.xtype=='combobox')",
                    "    {if(record.data[item.name]!=='')",
                    "        item.setDisabled(false);",
                    "     if(item.store.proxy.extraParams)",
                    "     { item.store.proxy.extraParams.combo ='combo';",
                    "      item.store.load({   scope: this,",
                    "                       callback: function (records, operation, success) {",
                    "",
                    "                           item.store.proxy.extraParams.combo ='';",
                    "                       }});",
                    "     }}",
                    "",
                    "});",
                    "// Show form",
                    "form.loadRecord(record);",
                    "vista.show();"
                ]
            },
            "name": "associate",
            "designerId": "8a649ba2-96f8-45a3-8962-3e07d102ce1a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "combo",
                    "record",
                    "eOpts"
                ],
                "fn": "onComboboxSelect",
                "implHandler": [
                    "var form =combo.up('form');",
                    "var acciones = combo.queryParam.split(',');",
                    "",
                    "for(var accion in acciones)",
                    "{",
                    "",
                    "    var campo = acciones[accion].split(':');",
                    "",
                    "    var item = form.down('combobox[name='+campo[0]+']');",
                    "",
                    "",
                    "    item.setValue('');",
                    "    if(campo[1]==='false')",
                    "    { item.setDisabled(false);",
                    "     if(record!==null)",
                    "     {var filter = [];",
                    "      filter.campo_id = record.toString();",
                    "      item.store.proxy.extraParams.combo='combo';",
                    "      filter.push({value:record.id.toString(),name_id:combo.name.split('_')[0]+'_id'});",
                    "      item.store.proxy.extraParams.filter=Ext.JSON.encode(filter);",
                    "",
                    "      item.store.load({   scope: this,",
                    "                       callback: function (records, operation, success) {",
                    "                           item.store.proxy.extraParams.combo = '';",
                    "                           item.store.proxy.extraParams.filter ='';",
                    "                       }});",
                    "     }",
                    "    }",
                    "    else {",
                    "        item.setDisabled(true);",
                    "    }",
                    "}"
                ]
            },
            "name": "onComboboxSelect",
            "designerId": "2ff038a8-38cd-4b2b-b688-d5c05359757f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "combo",
                    "record",
                    "eOpts"
                ],
                "fn": "onComboboxSelect1",
                "implHandler": [
                    "this.onComboboxSelect(combo,record,eOpts);"
                ]
            },
            "name": "onComboboxSelect1",
            "designerId": "23a613d0-f459-4361-a003-442d0c2a41d2"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slider",
                    "newValue",
                    "thumb",
                    "eOpts"
                ],
                "fn": "onSliderChange",
                "implHandler": [
                    "slider.setFieldLabel(slider.config.fieldLabel +' '+ newValue);",
                    ""
                ]
            },
            "name": "onSliderChange",
            "designerId": "0d40c7b7-cf4d-49ba-a55a-5cc1dcd71922"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "slider",
                    "newValue",
                    "thumb",
                    "eOpts"
                ],
                "fn": "onSliderChange1",
                "implHandler": [
                    "slider.setFieldLabel(slider.config.fieldLabel +' '+ newValue);",
                    ""
                ]
            },
            "name": "onSliderChange1",
            "designerId": "11b787b0-b9c4-49bc-82ef-61dc8f151990"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "xtype",
                    "comp",
                    "result"
                ],
                "fn": "searchComponent",
                "implHandler": [
                    "if(comp.xtype===xtype)",
                    "    result.push(comp);",
                    "if(comp.items)",
                    "    {",
                    "        var items = comp.items.items;",
                    "        for(var item in items)",
                    "            {",
                    "                this.searchComponent(xtype,items[item],result);",
                    "            }",
                    "    }",
                    "return result;"
                ]
            },
            "name": "searchComponent",
            "designerId": "1c9346e7-bdfe-46d2-8e90-1eb4cdca0f34"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "component",
                    "eOpts"
                ],
                "fn": "onToolbarAfterRender",
                "implHandler": [
                    "",
                    "var items = component.items.items;",
                    "for(var item in items)",
                    "{",
                    "    var obj= items[item];",
                    "",
                    "    if(obj.itemId==='btnAdd')",
                    "    {obj.setGlyph('xf055@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" >Adicionar (Ctrl+Mayus+N) </span><span> Adiciona un elemento en la lista.</span>');",
                    "    }",
                    "    if(obj.itemId==='btnEdit')",
                    "    {obj.setGlyph('xf044@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Editar (Ctrl+E) </span><span> Edita un elemento de una lista.</span>');",
                    "    }",
                    "    if(obj.itemId==='btnRemove')",
                    "    {obj.setGlyph('xf056@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Eliminar (Ctrl+D) </span><span> Elimina elemento(s) de una lista.</span>');",
                    "    }",
                    "    if(obj.itemId==='btnRefresh')",
                    "    {obj.setGlyph('xf01e@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Actualizar (Ctrl+A) </span><span> Actualiza lista de elementos.</span>');",
                    "    }",
                    "    if(obj.itemId==='btnAssociate')",
                    "    {obj.setGlyph('xf0ae@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Asociar (Ctrl+S) </span><span> Asocia elementos de una lista.</span>');",
                    "    }",
                    "",
                    "    if(obj.itemId==='btnImport')",
                    "    {obj.setGlyph('xf56f@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Importar (Ctrl+Alt+I) </span><span> Importar lista de elementos.</span>');",
                    "    }",
                    "",
                    "    if(obj.itemId==='btnExport')",
                    "    {obj.setGlyph('xf56e@FontAwesome');",
                    "     obj.setTooltip('<span style=\" font-weight:bold\" > Exportar (Ctrl+Alt+E) </span><span> Exportar lista de elementos.</span>');",
                    "    }",
                    "    // obj.setScale('medium');",
                    "    // obj.scale='medium';",
                    "    obj.tooltipType='title';",
                    "",
                    "}",
                    "",
                    ""
                ]
            },
            "name": "onToolbarAfterRender",
            "designerId": "9e0adfe3-3765-48b8-9e50-ba2bb802481f"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "comp",
                    "result",
                    "is_grid"
                ],
                "fn": "searchLabel",
                "implHandler": [
                    "//console.log(comp)",
                    "if(comp.xtype==='textfield'||comp.xtype==='numberfield' ||comp.xtype==='checkboxfield' ||comp.xtype==='datefield' ||comp.xtype==='combobox' ||comp.xtype==='slider' ||comp.xtype==='filefield' )",
                    "{",
                    "",
                    "    var xtype = 'gridcolumn';",
                    "",
                    " var listeners = '';",
                    "var lockable = '';",
                    " var locked = '';",
                    "    var format= '';",
                    "    var width = '';",
                    " var dataIndex = comp.name;",
                    "if (comp.name !='carnet_identidad') // arreglar este problema es prk el _id de carnet coincide o los combobox",
                    "   dataIndex = comp.name.replace('_id','');",
                    "    var emptyText = 'Ingrese el texto del filtro...';",
                    "  var filter = {",
                    "      type: 'string',dataIndex: dataIndex,emptyText:emptyText",
                    "                                };",
                    " if (comp.name =='nombre'||comp.name =='foto'||comp.name =='logotipo')",
                    "   {if(is_grid===true)",
                    "   {lockable = false;",
                    "                                locked= true;",
                    "   }",
                    "    if(comp.name =='nombre' &&is_grid===false)",
                    "    {xtype = 'treecolumn';",
                    "      width = 200;",
                    "    }",
                    "    if(comp.name =='nombre' &&is_grid===true)",
                    "    {",
                    "      width = 200;",
                    "    }",
                    "   }",
                    " switch(comp.xtype)",
                    "        {",
                    "            case 'numberfield':{",
                    "xtype = 'numbercolumn';",
                    "                filter = {",
                    "                                    type: 'numeric',dataIndex: dataIndex,emptyText:'Entre el número...'",
                    "                                };",
                    "                break;",
                    "            }",
                    "                case 'datefield':{",
                    "xtype = 'datecolumn';",
                    "                    format = 'Y-m-d';",
                    "                     filter = {",
                    "                         type: 'date',fields:{",
                    "    lt: {",
                    "        text: 'Antes'",
                    "    },",
                    "    gt: {",
                    "        text: 'Después'",
                    "    },",
                    "    eq: {",
                    "        text: 'En'",
                    "    }",
                    "},dateFormat: format,dataIndex: dataIndex",
                    "                                };",
                    "                    break;",
                    "            }",
                    "                case 'checkboxfield':{",
                    "xtype = 'checkcolumn';",
                    "                    listeners=  {beforecheckchange:  function(){return false;}};",
                    "                    filter = {",
                    "                        type: 'boolean',noText:'No',yesText:'Si',dataIndex: dataIndex",
                    "                                };",
                    "                    break;",
                    "            }",
                    "",
                    "        }",
                    "",
                    "  var column = {",
                    "                                xtype: xtype,",
                    "                                dataIndex: dataIndex,",
                    "                                header: comp.fieldLabel,",
                    "                                sortable: true,",
                    "        locked:locked,",
                    "        lockable:lockable,",
                    "      width:width,",
                    "                                align: 'left',",
                    "                                format:format,",
                    "                                listeners:listeners,",
                    "      filter:filter",
                    "                            };",
                    "    result.push(column);",
                    "",
                    "}",
                    "",
                    "if(comp.items)",
                    "    {",
                    "        var items = comp.items.items;",
                    "",
                    "        for(var item in items)",
                    "            {",
                    "                if(items[item].xtype==='panel'||items[item].xtype==='fieldset'||items[item].xtype==='container')",
                    "                    {",
                    "                        var aux = items[item].items.items;",
                    "                        var columns=[];",
                    "",
                    "",
                    "                        for (var j in aux)",
                    "                        {",
                    "                             this.searchLabel(aux[j],columns,is_grid);",
                    "                        }",
                    " var column = {",
                    "                                xtype: 'gridcolumn',",
                    "                                header: items[item].title,",
                    "                                sortable: false,",
                    "                                groupable:false,",
                    "                                align: 'center',",
                    "                                columns:columns",
                    "                            };",
                    "                        result.push(column);",
                    "",
                    "",
                    "                    }",
                    "                if(comp.xtype==='tabpanel')",
                    "                this.searchLabel(items[item],result,is_grid);",
                    "",
                    "            }",
                    "    }",
                    "",
                    "if((comp.items===undefined && comp.xtype===undefined))",
                    "    {",
                    "",
                    "        for(var item in comp)",
                    "            {",
                    "",
                    "                this.searchLabel(comp[item],result,is_grid);",
                    "            }",
                    "    }",
                    "return result;"
                ]
            },
            "name": "searchLabel",
            "designerId": "42d5f5ed-63f4-41ff-82d4-2ab59be122b1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "dataview",
                    "record",
                    "item",
                    "index",
                    "e",
                    "eOpts"
                ],
                "fn": "onGridPanelItemDblClick",
                "implHandler": [
                    "console.log(dataview)//en desarrollo para el keymap y click doble ditable"
                ]
            },
            "name": "onGridPanelItemDblClick",
            "designerId": "7c573019-6e4b-4383-ba8e-4c1a4bc0d813"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "aux",
                    "asociar"
                ],
                "fn": "getWinPanel",
                "implHandler": [
                    "var model = '';",
                    "var win = '';",
                    "if (asociar === undefined)",
                    "    asociar = '';",
                    "",
                    "{model =aux.replace('nomenclador','model.');",
                    "         win = aux.replace('nomenclador','')+asociar+'Form';",
                    "        }       if(aux==model)",
                    "        {model =aux.replace('seguridad','model.');",
                    "        win = aux.replace('seguridad','')+asociar+'Form';}",
                    "                if(aux==model)",
                    "                {model =aux.replace('persona','model.');",
                    "                win = aux.replace('persona','')+asociar+'Form';}",
                    "",
                    "                if(aux==model)",
                    "                {model =aux.replace('estructura','model.');",
                    "                 win = aux.replace('estructura','')+asociar+'Form';}",
                    "                if(aux==model)",
                    "                {model =aux.replace('actualizacion','model.');",
                    "                win = aux.replace('actualizacion','')+asociar+'Form';}",
                    "                if(aux==model)",
                    "                {model =aux.replace('comercial','model.');",
                    "                win = aux.replace('comercial','')+asociar+'Form';}",
                    "",
                    "this.model= model;",
                    "this.win=win;"
                ]
            },
            "name": "getWinPanel",
            "designerId": "b43224f9-2030-4fb4-bafd-c58ff849c33a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "combo",
                    "record",
                    "eOpts"
                ],
                "fn": "onComboboxSelectEntidad",
                "implHandler": [
                    " var form =combo.up('form');",
                    "                var acciones = combo.queryParam.split(',');",
                    "",
                    "                        for(var accion in acciones)",
                    "                        {",
                    "",
                    "                            var campo = acciones[accion].split(':');",
                    "",
                    "                            var item = form.down('treepanel[title='+campo[0]+']');",
                    "",
                    "",
                    "                //item.setValue('');",
                    "                            if(campo[1]==='false')",
                    "                                { item.setDisabled(false);",
                    "                                    if(record!==null)",
                    "                {var filter = [];",
                    "                        filter.campo_id = record.toString();",
                    "                        item.store.proxy.extraParams.combo='combo';",
                    "                        filter.push({value:record.id.toString(),name_id:combo.name});",
                    "                        item.store.proxy.extraParams.filter=Ext.JSON.encode(filter);",
                    "",
                    "                        item.store.load({   scope: this,",
                    "                            callback: function (records, operation, success) {",
                    "                                 item.clearFilters();",
                    "                                item.store.proxy.extraParams.combo = '';",
                    "                                item.store.proxy.extraParams.filter ='';",
                    "                            }});",
                    "                }",
                    "                                }",
                    "                                else {",
                    "                                    item.setDisabled(true);",
                    "                                }",
                    "                        }"
                ]
            },
            "name": "onComboboxSelectEntidad",
            "designerId": "9fa8afea-ad65-4080-ab3b-d052050d42c5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "filefield",
                    "value",
                    "eOpts"
                ],
                "fn": "onFilefieldChange",
                "implHandler": [
                    "console.log(filefield)",
                    "console.log(value)",
                    "var form =filefield.up('form');",
                    "var resulimage = [];",
                    "                    resulimage = this.searchComponent('image',form,resulimage);",
                    "                 for(var compimage in resulimage)",
                    "                            {var objimage = resulimage[compimage];",
                    "                                 if(objimage.xtype=='image')",
                    "                        {",
                    "                            console.log(objimage)",
                    "                        }",
                    "                            }"
                ]
            },
            "name": "onFilefieldChange",
            "designerId": "3663d909-1cc0-44fc-bb40-eb24087f7284"
        }
    ]
}