Ext.define('Ext.packages.dtz.combo_tree', {
    extend: 'Ext.form.field.Picker',
    alias: 'widget.combobox_tree',
    initComponent: function () {
        Ext.apply(this, {
            id: this.id,
            hideTrigger: false,
            enableKeyEvents: true,
            editable: this.editable,
            matchFieldWidth: this.matchFieldWidth,
            listeners: {
                scope: this,
                keyup: this.Ejecutar_keyups_events,
            //    focus: this.Focus_events,
                blur: this.blur,
                afterrender: this.afterrender
            }
        });
        this.callParent();
    },

    afterrender: function (combo) {
        if (this.loadbefore)
            this.Crear_arbol();
    },

    createPicker: function () {
        if (!this.loadbefore)
            this.Crear_arbol();
        return this.tree;
    },

    Crear_arbol: function () {
        if (Ext.get(this.TreeId))
            Ext.get(this.TreeId).destroy();
        var tree = Ext.create('Ext.tree.TreePanel', {
            hidden:true,
            id: this.TreeId,
            floating: true,
           // tbar: (this.HideTBar) ? null : this.Get_toolbar(),
            width: this.widthTree,
            title: (this.config_root) ? this.config_root.text : this.title,
            root: (this.config_root) ? this.config_root : null,
            rootVisible: this.rootVisible,
            height: 300,
            store: this.store,
            displayField: this.displayField,
            listeners: {
                scope: this,
                checkchange: this.Cambiar_checked_nodo,
                itemclick: this.Seleccionar_nodo
            }
        });
        this.tree = tree;
        if (this.config_root) {
            if (!this.config_root.children || this.config_root.children.length == 0)
                this.Cargar_arbol();
        }
    },


    Verificar_hijos: function (nodo) {
        var nodo_padre = nodo.parentNode;
        var cantidad = 0;
        nodo_padre.eachChild(function (nodo) {
            if (nodo.data.checked == true)
                cantidad++;
        });
        if (cantidad == 0)
            nodo_padre.set("checked", false);
    },

    Marcar_padre: function (nodo) {
        var nodo_padre = nodo.parentNode;
        if (!nodo_padre.isRoot())
            nodo_padre.set("checked", true);
    },

    Cambiar_checked_nodo: function (node, checked, obj) {
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        if (checked == true)
            this.Marcar_padre(node);
        else
            this.Verificar_hijos(node);
        if (node.hasChildNodes() && this.selHijos == true) {
            node.cascadeBy(function (nodo) {
                nodo.set('checked', checked);
            });
        }
        var arreglo_nodes = tree.getChecked();
        this.Mostrar_valores_picker(arreglo_nodes);
        this.expand();
    },

    Seleccionar_nodo: function (view, record, item, index, e, eOpts) {
        if (this.SimpleSelect) {
            if (this.SelUltimoNivel && !(record.leaf || record.data.leaf)) {
                var msg = 'Debe seleccionar un nodo de &uacute;ltimo nivel.';
                msg = (this.SelUltimoNivelText == '') ? msg : this.SelUltimoNivelText;
                this.markInvalid(msg);
                return
            }
            var displayField = this.displayField;
            var valueField = this.valueField;
            this.setFieldValue(record.data[valueField], record.data[displayField]);
            this.fireEvent('select', this, [record]);
            this.collapse();
            if (this.controller)
                if (App.getController(this.controller).Seleccionar_nodo)
                    App.getController(this.controller).Seleccionar_nodo(record);
        }
    },

        selectRecord: function(record) {
        var me = this;
        var treepanel = me.getPicker();
        var treestore = treepanel.getStore();
        var currentNode = treestore.getNodeById(record.data.id);

        currentNode = currentNode.parentNode;
        while (!currentNode.isRoot()) {
            currentNode.expand();
            currentNode = currentNode.parentNode;
        }

        treepanel.getSelectionModel().select(record, true);
        var displayField = this.displayField;
        var valueField = this.valueField;
        me.setFieldValue(record.data[valueField], record.data[displayField]);
    },

    setFieldValue: function (value, label) {
        var me = this;
        me.setValue(value);
        me.setRawValue(label);
        this.ActualizarNodo(value, label);
    },

    getSubmitValue: function () {
        var me = this;
        return me.getNodeId();

        /*var selectedRecords = me.tree.getSelectionModel().selected.items;
        if (selectedRecords.length > 1) {
            var values = [];
            for (var i=0; i < selectedRecords.length; i++) {
                values.push(selectedRecords[i].data[me.valueField]);
            }
            return values;
        }

        if (selectedRecords.length == 1) {
            return selectedRecords[0].data[me.valueField];
        }

        return null;*/
    },

    ActualizarNodo: function (value, label) {
        this.NodeSelectId = value;
        this.NodeSelectText = label;
    },

    Mostrar_valores_picker: function (array_nodes) {
        this.cadena = '';
        this.reset();
        if (array_nodes.length == 1) {
            this.setRawValue(array_nodes[0].data[this.displayField]);
            this.cadena = array_nodes[0].data[this.displayField];
            return;
        }
        else {
            for (var i = 0; i < array_nodes.length; i++) {
                if (i == 0)
                    this.cadena = this.cadena + array_nodes[i].data[this.displayField];
                else
                    this.cadena = this.cadena + ',' + array_nodes[i].data[this.displayField];
            }
        }
        this.setRawValue(this.cadena);
    },

    Get_toolbar: function () {
        var tbar = [];
        //   var me = this;
        if (!this.HideTBar) {
            tbar = [
                {
                    xtype: 'button',
                    //  id:this.IdBtnMarcarTodos,
                    hidden: this.HideBtnMarcarTodos,
                    tooltip: 'Marcar todos.',
                    iconCls: 'sel__dependientes',
                    tooltipType: 'title',
                    enableToggle: true,
                    allowDepress: true,
                    listeners: {
                        scope: this,
                        click: this.Marcar_desmarcar_todos
                    }
                },
                {
                    xtype: 'button',
                    //  id:'btn_expandir_todos',
                    hidden: this.HideBtnExpandir,
                    tooltip: 'Expandir.',
                    iconCls: 'expandir',
                    tooltipType: 'title',
                    listeners: {
                        scope: this,
                        click: this.Expandir_todos
                    }
                },
                {
                    xtype: 'button',
                    //  id:'btn_contraer_todos',
                    hidden: this.HideBtnContraer,
                    tooltip: 'Contraer.',
                    iconCls: 'contraer',
                    tooltipType: 'title',
                    listeners: {
                        scope: this,
                        click: this.Contraer_todos
                    }
                }
            ]
        }
        if (!this.HideFindOptions)
            this.AddFindOptions(tbar);
        return tbar;
    },

    Marcar_desmarcar_todos: function (b) {
        var me = this;
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var root_node = tree.getRootNode();
        var checked = b.pressed;
        if (checked == true)
            b.setTooltip('Desmarcar todos');
        else
            b.setTooltip('Marcar todos');
        root_node.cascadeBy(function (node) {
            if (!node.isRoot()) {
                node.set('checked', checked);
                var arreglo_nodes = tree.getChecked();
                me.Mostrar_valores_picker(arreglo_nodes);
            }
        })
    },

    Get_id_chequeados: function () {
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var chequeados = tree.getChecked();
        var arreglo = [];
        Ext.Array.each(chequeados, function (node, i) {
            arreglo.push(node.data.id);
        });
        return arreglo.join(",");
    },

    Get_nombre_chequeados: function () {
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var chequeados = tree.getChecked();
        var arreglo = [];
        Ext.Array.each(chequeados, function (node, i) {
            arreglo.push(node.data[this.displayField]);
        });
        return arreglo.join(",");
    },

    Get_Id_NodoSeleccionado: function () {
        if (this.SimpleSelect == true && this.getValue() != '') {
            var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
            var nodo = tree.getSelectionModel().getSelection()[0];

            return nodo.data.id;
        }
    },

    Expandir_todos: function (b) {
        Ext.ComponentQuery.query('#' + this.TreeId)[0].expandAll();
    },

    ContraerAllParentNodes: function () {
        if (this.collapseNodes)
            this.Contraer_todos();
    },

    Contraer_todos: function (b) {
        var root = Ext.ComponentQuery.query('#' + this.TreeId)[0].getRootNode();
        root.cascadeBy(function (nodo) {
            if (!nodo.isRoot() && !nodo.isLeaf()) {
                nodo.collapse();
            }
        }, this);
    },

    setTextNode: function (id, texto) {
        if (id == null || id == '')
            return;
        this.NodeSelectId = id;
        this.NodeSelectText = texto;
        if (Ext.ComponentQuery.query('#' + this.TreeId)[0]) {
            var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
            var node = tree.getStore().getNodeById(id);
            if (node.parentNode)
                node.parentNode.expand();
            tree.getSelectionModel().select(node);
            this.setValue(node.data[this.displayField]);
            return;
        }
        this.setValue(texto);
    },

    getNodeId: function () {
        return this.NodeSelectId;
    },

    AddFindOptions: function (tbar) {
        tbar.push({
                xtype: 'tbseparator',
                hidden: this.HideSp1
            }, {
                xtype: 'textfield',
                flex: 2,
                allowBlank: false,
                hidden: this.HideFieldFind,
                blankText: 'Debe introducir un nombre.',
                id: this.TreeId + 'txt_busqueda',
                margin: '0 2 0 0',
                value: ''
            }, {
                xtype: 'button',
                tooltip: 'Buscar',
                hidden: this.HideFieldFind,
                iconCls: 'buscar',
                tooltipType: 'title',
                scope: this,
                handler: function () {
                    this.FindNodeByText();
                }
            }
            ,{
                xtype:'button',
                iconCls: 'anterior',
                cls: "x-btn-icon",
                tooltipType: 'title',
                tooltip: 'Atrás',
                scope:this,
                handler: function(){
                    this.FindNextNode(false);
                }
            }, {
                xtype:'button',
                iconCls: 'siguiente',
                tooltipType: 'title',
                tooltip: 'Siguiente',
                cls: "x-btn-icon",
                scope:this,
                handler: function(){
                    this.FindNextNode(true);
                }
        }
        )
    },

    FindNodeByText: function () {
        var texto_busqueda = Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar textfield')[0].getValue();
        if (!Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar textfield')[0].isValid())
            return;
        Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar')[0].setDisabled(true);
        var existe = false;
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var me = this;
        var displayField = this.displayField;
        tree.getRootNode().cascadeBy(function (record) {
            texto_busqueda = texto_busqueda.toLocaleLowerCase().trim();
            if (!record.isRoot()) {
                if (record.data[displayField].toLocaleLowerCase().trim().indexOf(texto_busqueda) > -1 && existe == false) {
                    tree.getSelectionModel().select(record);
                    existe = true;
                    return false;
                }
            }
        });
        if (!existe) {
            var msg = 'No existe un nodo con ese nombre.';
            msg = (!this.invalidFindText) ? msg : this.invalidFindText;
            Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar textfield')[0].markInvalid(msg);
        }
        ;
        Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar')[0].setDisabled(false);
    },

    FindNextNode: function (next) {
        var texto_busqueda = Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar textfield')[0].getValue();
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var hasSelect = tree.getSelectionModel().hasSelection();
        if (!hasSelect)
            return;
        Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar')[0].setDisabled(true);
        var nodo = tree.getSelectionModel().getSelection()[0];
        var array = [];
        var pos_sel = 0;
        tree.getRootNode().cascadeBy(function (r) {
            var text_nodo = (texto_busqueda == '') ? nodo.data[this.displayField].toLocaleLowerCase().trim() : texto_busqueda.toLocaleLowerCase().trim();
            if (r.data[this.displayField].toLocaleLowerCase().trim().indexOf(text_nodo) > -1) {
                var sel = (r == nodo) ? true : false;
                var obj = {
                    id: r.data.id,
                    nombre: r.data[this.displayField],
                    sel: sel
                };
                array.push(obj);
                if (sel)
                    pos_sel = array.length - 1;
            }
        },this);
        if (next)
            var j = (array.length > 1) ? pos_sel + 1 : pos_sel;
        else
            var j = (array.length > 1) ? pos_sel - 1 : pos_sel;
        if (array[j]) {
            var next_node = tree.getStore().getNodeById(array[j].id);
            tree.getSelectionModel().select(next_node);
        }
        ;
        Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar')[0].setDisabled(false);
    },

    FindNodeByEditableText: function (texto) {
        var nodo;
        for (i = 0; i < this.arreglo_nodos.length; i++) {
            nodo = this.arreglo_nodos[i];
            if (nodo.data[this.displayField].trim().toLowerCase().indexOf(texto.trim().toLowerCase()) != -1) {
                return nodo;
            }
        }
    },

    Focus_events: function (field, e, eOpts) {
     //   this.onTriggerClick();
    //    this.expand();
    },

    blur: function (field) {
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var sel = tree.getSelectionModel().hasSelection();
        if (sel) {
            var nodo_sel = tree.getSelectionModel().getSelection()[0];
            tree.fireEvent('itemclick', tree, nodo_sel);
        }
    },

    Ejecutar_keyups_events: function (field, e, eOpts) {
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        if (!this.arreglo_nodos) {
            this.arreglo_nodos = new Array();
            this.getAllNodes(tree);
        }
        ;
        var texto = this.getValue();
        if (texto.length >= this.minChars) {
            var nodo = this.FindNodeByEditableText(texto.trim());
            tree.selectPath(nodo.getPath());
            this.focus();
        }
        ;
    },

    getAllNodes: function (tree) {
        var root_node = tree.getRootNode();
        root_node.cascadeBy(function (nodo) {
            if (!nodo.isRoot())
                this.arreglo_nodos.push(nodo);
        }, this);
    },

    Cargar_arbol: function () {
        var Mask = new Ext.LoadMask(this, {
            msg: 'Cargando...'
        });
        Mask.show();
        var tree = Ext.ComponentQuery.query('#' + this.TreeId)[0];
        var store = tree.getStore();
        var obtener = {
            url: this.config_root.url,
            method: 'POST',
            scope: this,
            timeout: 100000,
            params: this.config_root.params,
            callback: function (options, success, response) {
                Mask.hide();
                var json = Ext.JSON.decode(response.responseText);
                var root = {
                    text: this.config_root.text,
                    id: '0',
                    expanded: true,
                    children: json
                };
                store.setRootNode(root);
                this.ContraerAllParentNodes();
                if (this.MarcarTodosAfterLoad) {
                    var button = Ext.ComponentQuery.query('#' + this.TreeId + ' toolbar button')[0];
                    button.fireEvent('click', button);
                } else
                    this.expand();
                if (this.NodeSelectId != null && this.NodeSelectId != '') {
                    var node = store.getNodeById(this.NodeSelectId);
                    tree.getSelectionModel().select(node);
                }
            }
        };
        Ext.Ajax.request(obtener);
    }

});